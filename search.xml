<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python/Django-管理网站</title>
    <url>/2020/03/07/python/Django-%E7%AE%A1%E7%90%86%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>参考书籍：《Python编程从入门到实践》—Eric Matthes</p>
<h1 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h1><p><code>python manage.py createsuperuser</code></p>
<h1 id="向管理网站注册模型"><a href="#向管理网站注册模型" class="headerlink" title="向管理网站注册模型"></a>向管理网站注册模型</h1><p>在创建应用程序时，models.py所在目录下还有一个名为admin.py的文件。</p>
<p>修改admin.py的代码以向管理网站注册我们之前的模型<strong>Topic</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>QT/QT学习笔记-对话框创建</title>
    <url>/2020/03/06/QT/QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[<p>传智播客：<a href="https://www.bilibili.com/video/av54523708" target="_blank" rel="noopener">学习视频传送门</a></p>
<hr>
<blockquote>
<h1 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h1><blockquote>
<p>模态对话框：不可以对其他窗口进行操作</p>
<p>非模态对话框：可以对其他窗口进行操作</p>
</blockquote>
</blockquote>
<p><font color=red>实现点击新建按钮弹出一个对话框的功能</font></p>
<h2 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> connect(ui-&gt;actionnew,&amp;QAction::triggered,[=]()&#123;</span><br><span class="line">        <span class="comment">//对话框</span></span><br><span class="line">        <span class="comment">//分为模态对话框(不可以对其他窗口进行操作)和非模态对话框(可以)</span></span><br><span class="line">        <span class="comment">//模态创建</span></span><br><span class="line">		QDialog dlg(<span class="keyword">this</span>);</span><br><span class="line">        dlg.resize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        dlg.exec();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>模态对话框显示的方法是exec()，起到阻塞作用。</p>
<h2 id="模态对话框-1"><a href="#模态对话框-1" class="headerlink" title="模态对话框"></a>模态对话框</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非模态</span></span><br><span class="line">      <span class="function">QDialog <span class="title">dlg2</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">      dlg2.show();</span><br></pre></td></tr></table></figure>

<p>注意此时点击新建按钮时对话框只是”一闪而过”，原因是该对话框dlg2只是lambda表达式里的局部变量。在lambda表达式结束后消失。</p>
<p>更改为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QDialog *dlg2 = <span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</span><br><span class="line">      dlg2-&gt;show();</span><br></pre></td></tr></table></figure>

<p>但是我们注意到如果往复执行新建-&gt;关闭对话框的操作，很有可能造成内存泄漏，因为我们关闭对话框时并没有释放掉该对话框申请的内存，所以还需加上一句<code>dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);</code></p>
<h1 id="标准对话框"><a href="#标准对话框" class="headerlink" title="标准对话框"></a>标准对话框</h1><p>所谓标准对话框，是Qt内置的一系列对话框，用于简化开发。大致分为以下几类</p>
<ul>
<li>QColor:选择颜色</li>
<li>QFileDialog:选择文件或者目录</li>
<li>QFontDialog:选择字体</li>
<li>QInputDialog:允许用户输入一个值，并将其值返回</li>
<li>QMessageBox:模态对话框，用于显示信息，询问问题等</li>
<li>QPageSetupDialog:为打印机提供纸张相关的选项</li>
<li>QPrintDialog:打印机配置</li>
<li>QPrintPreviewDialog:打印预览</li>
<li>QProgressDialog:显示操作过程</li>
</ul>
<h2 id="消息对话框QMessageBox"><a href="#消息对话框QMessageBox" class="headerlink" title="消息对话框QMessageBox"></a>消息对话框QMessageBox</h2><h3 id="错误对话框"><a href="#错误对话框" class="headerlink" title="错误对话框"></a>错误对话框</h3><p><code>QMessageBox::critical()</code></p>
<img src="D:\HEXO\blog\source\_posts\QT\img\critical.png" alt="alt png" style="zoom:50%;" />



<h3 id="信息对话框"><a href="#信息对话框" class="headerlink" title="信息对话框"></a>信息对话框</h3><p><code>QMessageBox::information()</code></p>
<img src="D:\HEXO\blog\source\_posts\QT\img\info.png" alt="alt png" style="zoom:50%;" />

<h3 id="提问对话框"><a href="#提问对话框" class="headerlink" title="提问对话框"></a>提问对话框</h3><p><code>QMessageBox::question(this,&quot;info&quot;,&quot;?&quot;,QMessageBox::Save|QMessageBox::Cancel,QMessageBox::Cancel)</code></p>
<p>参数1：父亲 参数2：标题 参数3：提示内容 参数4：按键类型 参数5：默认关联回车按键。</p>
<p>返回值:StandarButton类型。</p>
<img src="D:\HEXO\blog\source\_posts\QT\img\question.png" alt="img png" style="zoom:50%;" />

<h3 id="警告对话框"><a href="#警告对话框" class="headerlink" title="警告对话框"></a>警告对话框</h3><p><code>QMessageBox::warning(this,&quot;warning&quot;,&quot;警告&quot;);</code></p>
<img src="D:\HEXO\blog\source\_posts\QT\img\warning.png" alt="img png" style="zoom:50%;" />

<h2 id="其他标准对话框"><a href="#其他标准对话框" class="headerlink" title="其他标准对话框"></a>其他标准对话框</h2><h3 id="颜色对话框"><a href="#颜色对话框" class="headerlink" title="颜色对话框"></a>颜色对话框</h3><p><code>QColorDialog::getColor(QColor(255,0,0));</code></p>
<p>返回值为QColor(RGB值)</p>
<h3 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h3><p><code>QFileDialog::getOpenFileName(this,&quot;打开文件&quot;,&quot;D:\\7788\\&quot;,&quot;(*.jpg)&quot;);</code></p>
<p>参数1：父亲  参数2：标题 参数3：默认打开路径 参数4：过滤文件格式</p>
<p>返回值：一个文件路径的字符串(QString)</p>
<h3 id="字体对话框"><a href="#字体对话框" class="headerlink" title="字体对话框"></a>字体对话框</h3><p><code>QFontDialog::getFont(&amp;flag,QFont(&quot;微软雅黑&quot;,36)); //第一个参数是一个bool值</code></p>
<p>返回值：QFont</p>
]]></content>
      <categories>
        <category>QT</category>
      </categories>
  </entry>
  <entry>
    <title>QT/QT学习笔记-QMainWindow</title>
    <url>/2020/03/06/QT/QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-QMainWindow/</url>
    <content><![CDATA[<p>传智播客：<a href="https://www.bilibili.com/video/av54523708" target="_blank" rel="noopener">学习视频传送门</a></p>
<p>QMainWindow是一个为用户提供主窗口程序的类，包含一个菜单栏(menu bar)，多个工具栏(tool bars)，多个链接部件(dock widgets)，一个状态栏(status bar)及一个中心部件(central widget)。</p>
<h1 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h1><p>只能有一个</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单栏创建 最多一个</span></span><br><span class="line">QMenuBar* bar = menuBar();</span><br><span class="line"><span class="comment">//将菜单栏放入窗口中</span></span><br><span class="line">setMenuBar(bar);</span><br><span class="line"><span class="comment">//创建菜单</span></span><br><span class="line">QMenu* fileMenu = bar-&gt;addMenu(<span class="string">"文件"</span>);</span><br><span class="line">QMenu* editMenu = bar-&gt;addMenu(<span class="string">"编辑"</span>);</span><br><span class="line"><span class="comment">//创建菜单项</span></span><br><span class="line">fileMenu-&gt;addAction(<span class="string">"新建"</span>);</span><br><span class="line"><span class="comment">//添加分隔符</span></span><br><span class="line">fileMenu-&gt;addSeparator();</span><br><span class="line">fileMenu-&gt;addAction(<span class="string">"打开"</span>);</span><br></pre></td></tr></table></figure>



<h1 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h1><p>可以有多个</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工具栏</span></span><br><span class="line">QToolBar* toolBar = <span class="keyword">new</span> QToolBar(<span class="keyword">this</span>);</span><br><span class="line">addToolBar(Qt::LeftToolBarArea,toolBar);</span><br><span class="line"></span><br><span class="line"><span class="comment">//后期设置 只允许左右停靠</span></span><br><span class="line">toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"><span class="comment">//设置浮动 关闭</span></span><br><span class="line">toolBar-&gt;setFloatable(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置移动(总开关)</span></span><br><span class="line">toolBar-&gt;setMovable(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置内容(共有菜单栏的内容)</span></span><br><span class="line">toolBar-&gt;addAction(newAction);</span><br><span class="line">toolBar-&gt;addAction(openAction);</span><br><span class="line"><span class="comment">//工具栏中添加控件</span></span><br><span class="line">QPushButton* btn = <span class="keyword">new</span> QPushButton(<span class="string">"aa"</span>,<span class="keyword">this</span>);</span><br><span class="line">toolBar-&gt;addWidget(btn);</span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="D:%5CHEXO%5Cblog%5Csource_posts%5CQT%5Cimg%5CQQ%E6%88%AA%E5%9B%BE20200306193355.png" alt="alt jpg"></p>
<h1 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态栏 最多一个</span></span><br><span class="line">QStatusBar* stBar = <span class="keyword">new</span> QStatusBar();</span><br><span class="line"><span class="comment">//设置到窗口中</span></span><br><span class="line">setStatusBar(stBar);</span><br><span class="line"><span class="comment">//放标签控件</span></span><br><span class="line">QLabel * label = <span class="keyword">new</span> QLabel(<span class="string">"提示信息"</span>,<span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;addWidget(label);</span><br><span class="line"></span><br><span class="line">QLabel * r_label = <span class="keyword">new</span> QLabel(<span class="string">"右侧提示信息"</span>,<span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;addPermanentWidget(r_label);</span><br></pre></td></tr></table></figure>



<h1 id="铆接部件-浮动窗口"><a href="#铆接部件-浮动窗口" class="headerlink" title="铆接部件(浮动窗口)"></a>铆接部件(浮动窗口)</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//铆接部件(浮动窗口) 可以有多个</span></span><br><span class="line">QDockWidget* dockWidget = <span class="keyword">new</span> QDockWidget(<span class="string">"浮动"</span>,<span class="keyword">this</span>);</span><br><span class="line">addDockWidget(Qt::BottomDockWidgetArea,dockWidget);</span><br><span class="line"><span class="comment">//设置后期停靠区域，只允许上下</span></span><br><span class="line">dockWidget-&gt;setAllowedAreas(Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置中心部件 只能一个</span></span><br><span class="line">QTextEdit* edit = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br><span class="line">setCentralWidget(edit);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>QT</category>
      </categories>
  </entry>
  <entry>
    <title>QT/QT学习笔记-Lambda表达式</title>
    <url>/2020/03/05/QT/QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>传智播客：<a href="https://www.bilibili.com/video/av54523708" target="_blank" rel="noopener">学习视频传送门</a></p>
<p>C++11中的Lambda表达式用于定义并创建匿名的函数对象。</p>
<h1 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture][parameters]<span class="keyword">mutable</span>-&gt;<span class="keyword">return</span>-&gt;type</span><br><span class="line">&#123;</span><br><span class="line">	statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>[函数对象参数](操作符重载函数参数)mutable-&gt;返回值(函数体)</code></p>
<h2 id="函数对象参数"><a href="#函数对象参数" class="headerlink" title="函数对象参数"></a>函数对象参数</h2><p>[]，标识一个Lamda的开始，这部分必须存在。</p>
<p>函数对象参数是用来传递给<font color=blue>编译器自动生成的</font><font color = green>函数对象类的</font>构造函数的。</p>
<p>函数对象参数只能使用那些到定义Lambd为止时Lambda所在作用范围内可见的局部变量。</p>
<p>可用形式：</p>
<ul>
<li>空。没有使用任何函数对象参数</li>
<li>=。函数体内可以使用Lambda所在作用范围内所有可见的局部变量，并且是<strong>值传递方式</strong>。</li>
<li>&amp;。函数体内可以使用Lambda所在作用范围内所有可见的局部变量，并且是<strong>引用传递方式</strong>。</li>
<li>this。函数体内可以使用Lambda所在类中的成员变量</li>
<li>a。将a按值进行传递。按值进行传递时，函数体内不能修改传递进来的a的拷贝，因为默认情况下函数是const的，要修改传递进来的a的拷贝，可以添加mutable修饰符。</li>
</ul>
<h2 id="操作符重载函数参数"><a href="#操作符重载函数参数" class="headerlink" title="操作符重载函数参数"></a>操作符重载函数参数</h2><p>标识重载的()操作符的参数，可以省略。参数可以通过按值和按引用两种方式进行传递。</p>
<h2 id="可修改标示符"><a href="#可修改标示符" class="headerlink" title="可修改标示符"></a>可修改标示符</h2><p>mutable声明，这部分可以省略。按值传递函数对象参数时，加上mutable修饰符后，可以修改按值传递进来的拷贝(<font color = red>不改变本体</font>)。</p>
<h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p>当返回值为void，或函数体中只有一处return的地方时，可以省略</p>
<h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><p>点击一个按钮生成一个新的窗口，并同时生成另外一个按钮实现点击关闭新窗口的功能。</p>
<ul>
<li><p>在widget.h下声明私有变量<code>QPushButton* closeBtn;</code></p>
<p>声明函数<code>void newButton();</code></p>
</li>
<li><p>在widget.cpp下定义函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> Widget::newButton()</span><br><span class="line">&#123;</span><br><span class="line">    closeBtn-&gt;setVisible(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在构造函数中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QWidget* new_Widget = <span class="keyword">new</span> QWidget;</span><br><span class="line">QPushButton* open = <span class="keyword">new</span> QPushButton(<span class="string">"open"</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;closeBtn = <span class="keyword">new</span> QPushButton(<span class="string">"close"</span>,<span class="keyword">this</span>);</span><br><span class="line">closeBtn-&gt;move(<span class="number">0</span>,<span class="number">300</span>);</span><br><span class="line">closeBtn-&gt;setVisible(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">connect(open,&amp;QPushButton::clicked,new_Widget,&amp;Widget::show);</span><br><span class="line">connect(open,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;Widget::newButton);</span><br><span class="line">connect(closeBtn,&amp;QPushButton::clicked,new_Widget,&amp;Widget::close);</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>QT</category>
      </categories>
  </entry>
  <entry>
    <title>python/Django-创建应用程序</title>
    <url>/2020/03/04/python/Django-%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>参考书籍：《Python编程从入门到实践》—Eric Matthes</p>
<ul>
<li><p>在虚拟环境中执行命令</p>
<p><code>python manage.py startapp learning_logs</code></p>
<p>命令让Django建立创建应用程序所需的基础设施。在learning_logs下创建了文件models.py, admin.py, views.py。我们将使用models.py来定义我们要在应用程序中管理的数据。</p>
</li>
</ul>
<h1 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h1><p>目前在models.py中的内容仅一条语句<code>from django.db import models</code></p>
<p>我们需要在模块中创建自己的模型。模型的作用是告诉Django如何处理应用程序中存储的数据。在代码层面上，我们把模型抽象为一个类。</p>
<p>添加代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topic</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""用户学习的主题"""</span></span><br><span class="line">    text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    data_added = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回模型的字符串表示"""</span></span><br><span class="line">        <span class="keyword">return</span> self.text</span><br></pre></td></tr></table></figure>

<ul>
<li>属性text是一个由字符或文本组成的数据-CharField，主要用来存储较少量的文本信息，比如名称、标题和城市等。</li>
<li>属性date_added是一个记录日期和时间的数据-DateTimeField。参数auto_now_add=True的意思是每当用户创建新主题时，都会让Django这个属性自动设置为当前时间。w</li>
<li>_<em>str_</em>()方法会打印出在这个方法中return的内容。在这里打印出属性text的值。</li>
</ul>
<h1 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h1><ul>
<li>要使用模型，必须要让Django将应用程序包含到项目中。打开<strong>learning_log/learning_log/setting.py</strong>文件，显示如下片段：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#my Apps</span></span><br><span class="line">    <span class="string">'learning_logs'</span> <span class="comment">#注：需要添加该语句</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在末行加上<code>&#39;learning_logs&#39;</code>。</p>
<hr>
<ul>
<li><p>接下来需要让Django修改数据库，使其能够存储模型Topic的相关信息。</p>
<p>在终端中执行命令：<code>python manage.py makemigrations learning_logs</code></p>
<p>成功提示:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Migrations for &apos;learning_logs&apos;:   </span><br><span class="line">	0001_initial.py:     </span><br><span class="line">		- Create model Topic</span><br></pre></td></tr></table></figure>

<ul>
<li><p>接下来应用迁移让Django替我们修改数据库<code>python manage.py migrate</code></p>
<p>成功提示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Running migrations:    </span><br><span class="line">	Rendering model states... DONE </span><br><span class="line">    Applying learning_logs.0001_initial... OK</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color=red><strong>之后每次需要修改管理的数据时，都要经过以上三个步骤。①修改models.py ②调用makemigrations ③让Django迁移项目。</strong></font></p>
<h1 id="管理网站"><a href="#管理网站" class="headerlink" title="管理网站"></a>管理网站</h1><h2 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h2><p><code>python manage.py createsuperuser</code></p>
<h2 id="向管理网站注册模型"><a href="#向管理网站注册模型" class="headerlink" title="向管理网站注册模型"></a>向管理网站注册模型</h2><p>在创建应用程序时，models.py所在目录下还有一个名为admin.py的文件。</p>
<p>修改admin.py的代码以向管理网站注册我们之前的模型<strong>Topic</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br></pre></td></tr></table></figure>

<h2 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h2><p>向管理网站注册Topic后，我们来添加第一个主题。为此，单击Topics进入主题网页，它几乎是空的，这是因为我们还没有添加任何主题。单击Add，你将看到一个用于添加新主题的表单。 在第一个方框中输入Chess，再单击Save，这将返回到主题管理页面，其中包含刚创建的主题。</p>
<h1 id="定义模型Entry"><a href="#定义模型Entry" class="headerlink" title="定义模型Entry"></a>定义模型Entry</h1><p>在model.py中增加Entry类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span>     </span><br><span class="line">    <span class="string">"""学到的有关某个主题的具体知识"""</span>      </span><br><span class="line">    topic = models.ForeignKey(Topic)     </span><br><span class="line">    text = models.TextField()     </span><br><span class="line">    date_added = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span>         </span><br><span class="line">        verbose_name_plural = <span class="string">'entries'</span>       </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span>         </span><br><span class="line">        <span class="string">"""返回模型的字符串表示"""</span></span><br><span class="line">        <span class="keyword">return</span> self.text[:<span class="number">50</span>] + <span class="string">"..."</span></span><br></pre></td></tr></table></figure>

<ul>
<li>继承了Django基类Model。</li>
<li>topic是一个ForeignKey(外键)实例，它是一个数据库术语，引用了数据库中的另一条记录。代码将每个条目关联到特定的主题。每个主题创建时都给它分配了一个键(ID)。</li>
<li>text是一个TextField实例且不受字长限制</li>
<li>嵌套的Meta类存储用于管理模型的额外信息。</li>
<li>__str__返回的是text前50个字符加上一串省略号，用来显示简介。</li>
</ul>
<p>接下来迁移模型即可</p>
<p><code>python manage.py makemigrations learning_logs</code></p>
<p><code>python manage.py migrate</code></p>
<h1 id="向管理网站注册Entry"><a href="#向管理网站注册Entry" class="headerlink" title="向管理网站注册Entry"></a>向管理网站注册Entry</h1><p>修改admin.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic,Entry</span><br><span class="line"></span><br><span class="line">admin.site.register(Topic)</span><br><span class="line">admin.site.register(Entry)</span><br></pre></td></tr></table></figure>

<p>返回到<a href="http://localhost/admin/，你将看到learning_logs下列出了Entries。单击Entries的Add链接，" target="_blank" rel="noopener">http://localhost/admin/，你将看到learning_logs下列出了Entries。单击Entries的Add链接，</a> 或者单击Entries再选择Add entry。你将看到一个下拉列表，让你能够选择要为哪个主题创建条目， 还有一个用于输入条目的文本框。</p>
<p>效果图:<img src="D:%5CHEXO%5Cblog%5Csource_posts%5Cpython%5Cimg%5Cadmin.png" alt="img png"></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>python/Django项目-准备</title>
    <url>/2020/03/04/python/Django%E9%A1%B9%E7%9B%AE-%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<p>参考书籍：《Python编程从入门到实践》—Eric Matthes</p>
<ul>
<li><p>建立虚拟环境</p>
<p>新建一个目录命名为learning_log，在该目录下打开终端</p>
<p><code>python -m venv ll_env</code></p>
</li>
<li><p>安装virtualenv</p>
<p><code>pip install --user virtualenv</code></p>
</li>
<li><p>激活虚拟环境(windows下)</p>
<p><code>ll_env/Scripts/activate</code></p>
</li>
<li><p>安装Django</p>
<p><code>pip install Django</code></p>
</li>
<li><p>在Django中创建项目</p>
<p><code>django-admin.py startproject learning_log .</code></p>
<p>若创建成功，则在learning_log目录下出现_<em>init_</em>.py, setting.py, urls.py, wsgi.py四个文件</p>
<ul>
<li>setting.py:指定Django如何与系统校核以及如何管理项目。</li>
<li>urls.py:告诉Django应创建哪些网页来响应浏览器请求。</li>
<li>wsgi.py:帮助Django提供它创建的文件。</li>
</ul>
</li>
<li><p>创建数据库</p>
<p><code>python manege.py migrate</code> </p>
<p>若创建成功，则出现文件db.sqlite3。(SQLite是一种使用单个文件的数据库)</p>
</li>
<li><p>查看项目：</p>
<p><code>python manage.py runserver</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>python/互喷脚本</title>
    <url>/2020/03/04/python/%E4%BA%92%E5%96%B7%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><font color="blue">本文参考B站UP主寒食君的视频，基于个人理解写成</font><a href="https://www.bilibili.com/video/av71289666" target="_blank" rel="noopener">视频传送门</a></p>
<hr>
<p>或许许多人都有在网络冲浪或者游戏里都多多少少有跟人对线的经历，可惜奈何手速不太行。看了这个视频仿佛找到了跟人对线的良器，尤其是在研习代码时使我受益良多~</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>即一个能实现按下指定的任意键就能从文本库中调取一条语句并复制到剪贴板的功能。</p>
<p><font color="red">希望大家还是能营造一个良好的网络环境，把这个代码当成一个学习过程就好啦。</font></p>
<h1 id="库准备"><a href="#库准备" class="headerlink" title="库准备"></a>库准备</h1><p>（本人python版本为3.6.0 32位）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> PyHook3</span><br><span class="line"><span class="keyword">import</span> pythoncom</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<ul>
<li>我们需要win32clipboard来实现python对windows剪切板的操作。</li>
</ul>
<p>​       安装：<code>pip install pypiwin32</code></p>
<ul>
<li><p>pyHook是一个钩子，用来监听鼠标或键盘事件。</p>
<p>（由于不知名原因，我用不了pyHook所以使用的是PyHook3,效果一样，但是pyHook3安装繁琐一些而且对应版本的轮子较少）</p>
<ul>
<li>pyHook轮子下载 ： <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyhook" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyhook</a> </li>
<li>pyHook3安装教程： <a href="https://blog.csdn.net/u013560932/article/details/78732250/" target="_blank" rel="noopener">https://blog.csdn.net/u013560932/article/details/78732250/</a> </li>
</ul>
</li>
</ul>
<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#监听键盘事件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onKeyboardEvent</span><span class="params">(event)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(event.Key == <span class="string">"Lcontrol"</span>): <span class="comment">#按下左下角的ctrl键，可以修改为</span></span><br><span class="line">        b = random.sample(array,<span class="number">1</span>) <span class="comment">#从array数组中随机取出一条句子</span></span><br><span class="line">        settext(b[<span class="number">0</span>].encode(<span class="string">'utf-8'</span>).decode(<span class="string">'utf8'</span>).encode(sys.getfilesystemencoding()))<span class="comment">#设置到剪贴板中</span></span><br><span class="line">    <span class="comment">#print(event.Key)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把字符串复制到剪贴板中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">settext</span><span class="params">(s)</span>:</span></span><br><span class="line">    w.OpenClipboard()</span><br><span class="line">    w.EmptyClipboard()</span><br><span class="line">    <span class="comment">#print(chardet.detect(str.encode(s)))</span></span><br><span class="line">    res = s.decode(<span class="string">'utf-8'</span>) <span class="comment">#如果出现乱码，注释这条语句</span></span><br><span class="line">    w.SetClipboardData(win32con.CF_UNICODETEXT,res)</span><br><span class="line">    w.CloseClipboard()</span><br></pre></td></tr></table></figure>



<h1 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> PyHook3</span><br><span class="line"><span class="keyword">import</span> pythoncom</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'yaoshui.txt'</span> <span class="comment">#在这里修改你的文件名路径</span></span><br><span class="line"></span><br><span class="line">array=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onKeyboardEvent</span><span class="params">(event)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(event.Key == <span class="string">"Lcontrol"</span>):</span><br><span class="line">        b = random.sample(array,<span class="number">1</span>)</span><br><span class="line">        settext(b[<span class="number">0</span>].encode(<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>).encode(sys.getfilesystemencoding()))</span><br><span class="line">    print(event.Key)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gettext</span><span class="params">()</span>:</span></span><br><span class="line">    w.OpenClipboard()</span><br><span class="line">    t = w.GetClipboardData(win32con.CF_TEXT)</span><br><span class="line">    w.CloseClipboard()</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">settext</span><span class="params">(s)</span>:</span></span><br><span class="line">    w.OpenClipboard()</span><br><span class="line">    w.EmptyClipboard()</span><br><span class="line">    <span class="comment">#print(chardet.detect(str.encode(s)))</span></span><br><span class="line">    res = s.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    w.SetClipboardData(win32con.CF_UNICODETEXT,res)</span><br><span class="line">    w.CloseClipboard()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f = open(filename,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    array = f.readlines() </span><br><span class="line"></span><br><span class="line">    hm = PyHook3.HookManager()</span><br><span class="line">    </span><br><span class="line">    hm.KeyDown = onKeyboardEvent</span><br><span class="line">    hm.HookKeyboard()</span><br><span class="line"></span><br><span class="line">    pythoncom.PumpMessages()</span><br></pre></td></tr></table></figure>



<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>如果遇到中文字符乱码的情况，也许是<code>SetClipboardData()</code>这里出现问题。我在测试的时候发现参数s的字符串类型为byte，所以decode解码成了’utf-8’的编码。如果在你的电脑上运行参数s的类型是str的话，就注释掉decode的那一条语句。</p>
<p><font color="red">如果您有任何问题，欢迎在评论区与我讨论</font></p>
]]></content>
  </entry>
  <entry>
    <title>QT/QT学习笔记-信号和槽</title>
    <url>/2020/03/03/QT/QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/</url>
    <content><![CDATA[<h1 id="信号-Signal-和槽-Slot"><a href="#信号-Signal-和槽-Slot" class="headerlink" title="信号(Signal)和槽(Slot)"></a>信号(Signal)和槽(Slot)</h1><ul>
<li>伪代码描述：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">connect(信号的发送者,发生的具体信号,信号的接受者,信号的处理(槽))</span><br></pre></td></tr></table></figure>

<p>​    <em>eg</em>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求:点击mybtn实现关闭窗口的功能 connect(mybtn,&amp;MyPushButton::clicked,this,&amp;mywidget::close);</span></span><br></pre></td></tr></table></figure>

<h2 id="断开"><a href="#断开" class="headerlink" title="断开"></a>断开</h2><p>disconnect()</p>
<h1 id="QPushButton的Signal函数"><a href="#QPushButton的Signal函数" class="headerlink" title="QPushButton的Signal函数"></a>QPushButton的Signal函数</h1><h2 id="继承自QAbstractButton"><a href="#继承自QAbstractButton" class="headerlink" title="继承自QAbstractButton"></a>继承自QAbstractButton</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void clicked(bool checked=false)	//点击</span><br><span class="line">void pressed()						//按下</span><br><span class="line">void released()						//松开</span><br><span class="line">void toggled(bool checked)			//一直按着不松开</span><br></pre></td></tr></table></figure>



<h1 id="自定义的信号和槽"><a href="#自定义的信号和槽" class="headerlink" title="自定义的信号和槽"></a>自定义的信号和槽</h1><h2 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h2><ul>
<li><p>写在signals下</p>
</li>
<li><p>返回值为void，只需要声明</p>
</li>
<li><p>可以有参数，可以重载</p>
</li>
</ul>
<h2 id="自定义槽"><a href="#自定义槽" class="headerlink" title="自定义槽"></a>自定义槽</h2><ul>
<li>早期版本必须写到public slots下，高级版本可以写到public或者全局下</li>
<li>返回值是void 需要声明也需要实现</li>
<li>可以有参数可以重载</li>
</ul>
<h2 id="函数重载冲突"><a href="#函数重载冲突" class="headerlink" title="函数重载冲突"></a>函数重载冲突</h2><p>此时需要函数指针指向函数地址</p>
<p><em>eg</em>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>(Teacher::*teacherSignal)(QString) = &amp;Teacher::hungry;</span><br><span class="line"><span class="keyword">void</span>(Student::*studentSignal)(QString) = &amp;Student::treat;</span><br><span class="line">connect(tc,teacherSignal,st,studentSignal);</span><br><span class="line">classIsOver();</span><br></pre></td></tr></table></figure>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul>
<li><p>信号可以连接信号</p>
</li>
<li><p>一个信号可以连接多个槽函数</p>
</li>
<li><p>多个信号可以连接一个槽函数</p>
</li>
<li><p>信号和槽函数的参数类型必须一一对应</p>
</li>
<li><p>信号的参数个数可以多于槽函数的参数个数</p>
</li>
</ul>
]]></content>
      <categories>
        <category>QT入门</category>
      </categories>
  </entry>
  <entry>
    <title>QT/QT学习笔记-对象树</title>
    <url>/2020/03/03/QT/QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AF%B9%E8%B1%A1%E6%A0%91/</url>
    <content><![CDATA[<p>传智播客：<a href="https://www.bilibili.com/video/av54523708" target="_blank" rel="noopener">学习视频传送门</a></p>
<h1 id="对象模型-对象树"><a href="#对象模型-对象树" class="headerlink" title="对象模型(对象树)"></a>对象模型(对象树)</h1><ul>
<li><p>当创建的对象在堆区时候如果指定的父类是QObject派生下来的类或者QObject子类派生下来的类，可以不用管理释放的操作，将对象放入到对象树中。在一定程度上简化了内存回收机制</p>
</li>
<li><p>当创建一个QObject对象时，会看到QObject的构造函数接收一个QObject指针作为参数，这个参数就是parent，也就是父对象指针。这相当于，在创建QObject对象时，可以提供一个其父对象，我们创建的这个QObject对象会自动添加到其父对象的children()列表。</p>
<p><em>eg</em>：一个按钮有一个QShortcut（快捷键）对象作为其子对象。当我们删除按钮的时候，这个快捷键应被删除。</p>
</li>
</ul>
<h2 id="QWidgt是能够在屏幕上显示一切组件的父类"><a href="#QWidgt是能够在屏幕上显示一切组件的父类" class="headerlink" title="QWidgt是能够在屏幕上显示一切组件的父类"></a>QWidgt是能够在屏幕上显示一切组件的父类</h2><ul>
<li><p>QWidgt继承自Qbject</p>
<p><em>eg</em>当关闭应用程序的窗口时，任何组件都随着窗口消失而消失</p>
</li>
</ul>
<h2 id="解决内存问题"><a href="#解决内存问题" class="headerlink" title="解决内存问题"></a>解决内存问题</h2><ul>
<li><p>当一个QObject对象在堆上创建时，Qt会为其创建一个对象树。但是对象树中的对象是没有定义的，因此销毁的顺序也是未定义的。</p>
</li>
<li><p>任何对象树中QObject对象delete的时候。如果它有parent，那么将其从parent的children()列表中删除；如果有孩子，则自动delete每一个孩子。Qt保证没有QObject被delete两次</p>
</li>
</ul>
<h2 id="出现另一种问题"><a href="#出现另一种问题" class="headerlink" title="出现另一种问题"></a>出现另一种问题</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QPushButton <span class="title">quit</span><span class="params">(<span class="string">"Quit"</span>)</span></span>;</span><br><span class="line">QWidget window;</span><br><span class="line">quit.setParent(&amp;window);</span><br></pre></td></tr></table></figure>

<p>由于window是最后一个被创建的对象，所以首先调用window的析构函数，再对quit析构(这里可以理解为栈的先进后出)。由于quit是window的子对象，所以quit在此时也被析构了。在执行完window的析构之后，又对quit调用了一次析构函数。由于对quit调用了两次析构函数，程序崩溃。</p>
]]></content>
      <categories>
        <category>QT入门</category>
      </categories>
  </entry>
  <entry>
    <title>python/webapp D3</title>
    <url>/2020/03/02/python/webapp%20D3/</url>
    <content><![CDATA[<h1 id="yield-from-amp-await"><a href="#yield-from-amp-await" class="headerlink" title="yield from &amp; await"></a>yield from &amp; await</h1><p> <a href="https://blog.csdn.net/soonfly/article/details/78361819" target="_blank" rel="noopener">https://blog.csdn.net/soonfly/article/details/78361819</a> </p>
]]></content>
  </entry>
  <entry>
    <title>leetcode/5.最大回文子串(动态规划)</title>
    <url>/2020/02/25/leetcode/5.%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2(%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">题目链接</a></p>
<p>题目描述:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/longest-palindromic-substring</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

<p>本题大致分为四种解法</p>
<ul>
<li>暴力遍历</li>
<li>翻转字符串找出最长公共子串(需谨慎处理)</li>
<li>动态规划</li>
<li>中心拓展</li>
</ul>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>1、创建一个二维数组<code>vector&lt;vector&lt;bool&gt;&gt; dp(size,vector&lt;bool&gt;(size))</code>初始状态为false，dp[i][j]的值为True表示从i开始到j结束。</p>
<p>2、对dp数组进行初始化，即当i和j相等时，将dp[i][j]置为True。且对于字符串的下一个元素来说，如果s[i]==s[i+1], 那么dp[i][j+1]也为True。</p>
<p>3、状态转移。对于任何符合规范的长度，如果首尾字符s[start]==s[end]相等且dp[start+1][end-1]为True,那么dp[start][end]为True。</p>
<p>完整代码:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = s.size();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">1</span> || size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; dp(size,<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(size));</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i != size <span class="number">-1</span> &amp;&amp; s[i] == s[i+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][i+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                max = <span class="number">2</span>;</span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">3</span>; len &lt;= size; len++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - len + <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j=len+i<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==s[j] &amp;&amp; dp[i+<span class="number">1</span>][j<span class="number">-1</span>]==<span class="literal">true</span>)<span class="comment">//状态转移</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j]=<span class="literal">true</span>;</span><br><span class="line">                    start=i;</span><br><span class="line">                    max=len;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substr(start,max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Javascript/JS基础</title>
    <url>/2020/02/15/Javascript/JS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h1><h2 id="1、JavaScript用法"><a href="#1、JavaScript用法" class="headerlink" title="1、JavaScript用法"></a>1、JavaScript用法</h2><p>HTML脚本必须位于&lt;script&gt;&lt;/script&gt;标签之间</p>
<p>脚本可被放置在HTML页面的&lt;body&gt;和&lt;head&gt;部分中</p>
<h2 id="2、JavaScript标签"><a href="#2、JavaScript标签" class="headerlink" title="2、JavaScript标签"></a>2、JavaScript标签</h2><p>在HTML中插入JavaScript，使用&lt;script&gt;标签</p>
<p>在&lt;script&gt;&lt;script&gt;之间书写代码</p>
<h2 id="3、JavaScript使用限制"><a href="#3、JavaScript使用限制" class="headerlink" title="3、JavaScript使用限制"></a>3、JavaScript使用限制</h2><p>在HTML中，不限制脚本数量</p>
<p>通常会把脚本放置于&lt;head&gt;标签中，以不干扰页面内容</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>CSS/CSS动画</title>
    <url>/2020/02/14/CSS/CSS%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h1 id="2D、3D转换"><a href="#2D、3D转换" class="headerlink" title="2D、3D转换"></a>2D、3D转换</h1><p>通过CSS3转换，我们能够对元素进行移动、缩放、转动、拉长或拉伸</p>
<p>转换是使元素改变形状、尺寸和位置的一种效果</p>
<h2 id="2D转换方法："><a href="#2D转换方法：" class="headerlink" title="2D转换方法："></a>2D转换方法：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">translate()		//平移</span><br><span class="line">rotate()		//翻转</span><br><span class="line">scale()			//缩放</span><br><span class="line">skew()			//倾斜</span><br><span class="line">matrix()		//矩阵</span><br></pre></td></tr></table></figure>

<p>在不同的浏览器可能需要加上不同的前缀</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-webkit-transform:translate()	//safari、chrome</span><br><span class="line">-ms-transform:translate()		//IE</span><br><span class="line">-o-transform:translate()		//opera</span><br><span class="line">-moz-transform:translate()		//firefox</span><br></pre></td></tr></table></figure>





<h2 id="3D转换方法："><a href="#3D转换方法：" class="headerlink" title="3D转换方法："></a>3D转换方法：</h2><p>rotateX()</p>
<p>rotateY()</p>
<h1 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h1><p>通过使用CSS3，可以给元素添加一些效果</p>
<p>CSS3过渡是元素从一种样式转换为另一种样式</p>
<p>​    动画执行的CSS</p>
<p>​    动画执行的时间</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS/CSS常用操作</title>
    <url>/2020/02/10/CSS/CSS%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h1><p>1、使用margin属性进行水平操作</p>
<p>2、使用属性进行左右对齐</p>
<p>3、使用float属性进行左右对齐</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">height				设置元素的高度</span><br><span class="line">line-height			设置行高</span><br><span class="line">max-height			设置元素最大高度</span><br><span class="line">max-width			设置元素最大宽度</span><br><span class="line">min-width			设置元素最小宽度</span><br><span class="line">min-height			设置元素最小高度</span><br><span class="line">width				设置元素宽度</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clear				设置一个元素的侧面是否允许其他的浮动元素</span><br><span class="line">cursor				规定当指向某元素之上时显示的指针类型</span><br><span class="line">display				设置是否及如何显示元素</span><br><span class="line">float				定义元素在那个方向浮动</span><br><span class="line">position			把元素放置到一个静态的、相对的、绝对的、固定的位置</span><br><span class="line">visibility			设置元素是否可见或不可见</span><br></pre></td></tr></table></figure>



<h1 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h1><p>1、垂直导航栏</p>
<p>2、水平导航栏</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>python/python学习笔记8测试</title>
    <url>/2020/02/10/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest </span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NamesTestCase</span><span class="params">(unittest.TestCase)</span>:</span>     </span><br><span class="line"><span class="string">"""测试name_function.py"""</span>          </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span><span class="params">(self)</span>:</span>         </span><br><span class="line">	<span class="string">"""能够正确地处理像Janis Joplin这样的姓名吗？"""</span> </span><br><span class="line">    	formatted_name = get_formatted_name(<span class="string">'janis'</span>, <span class="string">'joplin'</span>)         							self.assertEqual(formatted_name, <span class="string">'Janis Joplin'</span>) </span><br><span class="line"> </span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure>

<p>首先，我们导入了模块unittest和要测试的函数get_formatted_ name()。我们创建 了一个名为NamesTestCase的类，用于包含一系列针对get_formatted_name()的单元测试。你可以随便给这个类命名，但最好让它看起来与要测试的函数相关，并包含字样Test。这个类必须继承 unittest.TestCase类，这样Python才知道如何运行你编写的测试。所有以test_打头的方法都将自动运行。</p>
<h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>unittest.TestCase的断言方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assertEqual(a,b)				核实a==b</span><br><span class="line">assertNotEqual(a,b)				核实a!=b</span><br><span class="line">assertTrue(x)					核实x为True</span><br><span class="line">assertFalse(x)					核实x为False</span><br><span class="line">assertIn(item,list)				核实item在list中</span><br><span class="line">assertNotIn(item,list)			核实item不在list中</span><br></pre></td></tr></table></figure>



<h2 id="方法setUp"><a href="#方法setUp" class="headerlink" title="方法setUp()"></a>方法setUp()</h2><p>如果在TestCase类中包含了方法setUp(),Python将先运行它，再运行各个以test_打头的方法。</p>
]]></content>
      <categories>
        <category>python入门</category>
      </categories>
  </entry>
  <entry>
    <title>python/python学习笔记7文件和异常</title>
    <url>/2020/02/09/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07%E6%96%87%E4%BB%B6%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<hr>
<p>categories；</p>
<ul>
<li>python入门</li>
</ul>
<hr>
<h1 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h1><h2 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object:     </span><br><span class="line">	contents = file_object.read()     </span><br><span class="line">	print(contents)</span><br></pre></td></tr></table></figure>

<p>函数open()接受一个参数：要打开的文件的名称，并返回一个表示文件的对象。</p>
<p>关键字with在不再需要访问文件后关闭，所以未调用close()。</p>
<p>有了表示的文件对象后，使用方法read()读取文件的全部内容，存储在变量contents中。</p>
<h2 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h2><p><code>for line in file_object:</code></p>
<h2 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span> </span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object: </span><br><span class="line">	lines = file_object.readlines() </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:    </span><br><span class="line">	print(line.rstrip())</span><br></pre></td></tr></table></figure>



<h1 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h1><p>要将文本写入文件，在调用open()时需要提供另一个实参。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename = &apos;programming.txt&apos; </span><br><span class="line"> </span><br><span class="line">with open(filename, &apos;w&apos;) as file_object: </span><br><span class="line">	file_object.write(&quot;I love programming.&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>读取模式’r’</p>
</li>
<li><p>写入模式’w’</p>
</li>
<li><p>附加模式’a’</p>
</li>
<li><p>读取和写入模式’r+’</p>
</li>
</ul>
<p>如果省略模式实参，python将以默认的只读模式打开文件</p>
<p>要将数值数据存储到文本文件中，必须先使用函数str()。</p>
<p>另外，函数write()不会在你写入的文本末尾添加换行符。</p>
<h1 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h1><p>模块json让你能够将简单的python数据结果转储到文件中，并在程序再次运行时加载该程序中的数据。还可以使用json在python程序之间分享数据。</p>
<p>写入：<code>json.dump()</code></p>
<p>读入：<code>json.load()</code></p>
]]></content>
  </entry>
  <entry>
    <title>CSS/CSS盒子模型</title>
    <url>/2020/02/08/CSS/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>盒子模型的内容范围包括：</p>
<p>margin、border、padding、content部分组成</p>
<h1 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h1><p>内边距在content外，边框内</p>
<p>属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">padding							设置所有边距</span><br><span class="line">padding-bottom/left/right/top	设置底/左/右/上边距</span><br></pre></td></tr></table></figure>



<h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><h2 id="1、CSS边框"><a href="#1、CSS边框" class="headerlink" title="1、CSS边框"></a>1、CSS边框</h2><p>我们可以创建出效果出色的边框，并且可以应用于任何元素</p>
<h2 id="2、边框的样式"><a href="#2、边框的样式" class="headerlink" title="2、边框的样式"></a>2、边框的样式</h2><p>border-style:定义了10个不同的非继承样式，包括none</p>
<h2 id="3、边框的单边样式"><a href="#3、边框的单边样式" class="headerlink" title="3、边框的单边样式"></a>3、边框的单边样式</h2><p>border-top-style</p>
<p>border-left-style</p>
<p>border-right-style</p>
<p>border-bottom-style</p>
<h2 id="4、CSS3边框"><a href="#4、CSS3边框" class="headerlink" title="4、CSS3边框"></a>4、CSS3边框</h2><p>border-radius:圆角边框</p>
<p>box-shadow:边框阴影</p>
<p>border-image:边框图片</p>
<h1 id="CSS外边距"><a href="#CSS外边距" class="headerlink" title="CSS外边距"></a>CSS外边距</h1><p>围绕在内容边框的区域就是外边距，外边距默认为透明区域</p>
<p>外边距接受任何长度单位、百分数值</p>
<h2 id="外边距常用属性"><a href="#外边距常用属性" class="headerlink" title="外边距常用属性:"></a>外边距常用属性:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">margin								设置所有边距</span><br><span class="line">margin-bottom/left/right/top		设置底/左/右/上边距</span><br></pre></td></tr></table></figure>



<h1 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h1><p>外边距合并就是一个叠加的概念</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS/CSS定位</title>
    <url>/2020/02/08/CSS/CSS%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h1 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h1><h2 id="1、CSS定位"><a href="#1、CSS定位" class="headerlink" title="1、CSS定位"></a>1、CSS定位</h2><p>改变元素在页面上的位置</p>
<h2 id="2、CSS定位机制"><a href="#2、CSS定位机制" class="headerlink" title="2、CSS定位机制"></a>2、CSS定位机制</h2><ul>
<li><p>普通流:元素按照其在HTML中的位置顺序决定排布的过程</p>
</li>
<li><p>浮动</p>
</li>
<li><p>绝对布局</p>
</li>
</ul>
<h2 id="3、CSS定位属性"><a href="#3、CSS定位属性" class="headerlink" title="3、CSS定位属性"></a>3、CSS定位属性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position					把元素放在一个静态的、相对的、绝对的、或固定的位置中</span><br><span class="line">top/left/right/bottom		元素向上/向左/向右/向下的偏移量</span><br><span class="line">overflow					设置元素溢出其区域发生的事情</span><br><span class="line">clip						设置元素显示的形状</span><br><span class="line">vertical-align				设置元素垂直对齐方式</span><br><span class="line">z-index						设置元素的堆叠顺序//谁的值大谁在前面</span><br></pre></td></tr></table></figure>

<h3 id="1、position属性"><a href="#1、position属性" class="headerlink" title="1、position属性"></a>1、position属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static</span><br><span class="line">relative</span><br><span class="line">absolute</span><br><span class="line">fixed</span><br></pre></td></tr></table></figure>



<h1 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h1><h2 id="1、浮动"><a href="#1、浮动" class="headerlink" title="1、浮动"></a>1、浮动</h2><p>float属性可用的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">left:属性向左浮动</span><br><span class="line">right:元素向右浮动</span><br><span class="line">none:元素不浮动</span><br><span class="line">inherit:从父级继承浮动属性</span><br></pre></td></tr></table></figure>

<h2 id="2、clear属性"><a href="#2、clear属性" class="headerlink" title="2、clear属性"></a>2、clear属性</h2><p>去掉浮动属性（包括继承来的属性）</p>
<p>clear属性值:</p>
<p>left、right：去掉元素向左、右浮动</p>
<p>both:左右两侧均去掉浮动</p>
<p>inherit:从父级继承来clear的值</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>python/python学习笔记6类</title>
    <url>/2020/02/08/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h1><h2 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__()方法"></a>__init__()方法</h2><p>每次创建新的实例时，python都会自动运行它。</p>
<p>方法__init__中并未显示地包含return语句，但python自动返回一个实例。</p>
<h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><p>self会自动传递，因此我们不需要传递它。</p>
<p>以self为前缀的变量都可以供类中的所有方法使用</p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>创建字类时，父类必须包含在当前文件中，且位于子类前面。</p>
<p>定义子类时，必须在括号内指定父类的名称。</p>
<p><code>class son_name(father_name):</code></p>
<h2 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h2><p>super是一个特殊函数，帮助python将父类和子类关联起来。</p>
<p><code>super().__init__(make, model, year)</code></p>
<h2 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h2><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可以对其进行重写。</p>
<p>当在子类中与要重写的父类方法同名时，python将不会考虑这个父类方法，而只关注在子类中定义的相应的方法。</p>
<h1 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h1><p><code>from module_name import class_name</code></p>
<p><code>from module_name import class_name1,class_name2...</code></p>
<p><code>from module_name import *</code></p>
<h1 id="python标准库"><a href="#python标准库" class="headerlink" title="python标准库"></a>python标准库</h1><h2 id="collections模块"><a href="#collections模块" class="headerlink" title="collections模块"></a>collections模块</h2><p>collections中的OrderedDict类的示例与字典几乎相同，但能记录键-值对的添加顺序。</p>
]]></content>
      <categories>
        <category>python入门</category>
      </categories>
  </entry>
  <entry>
    <title>python/python学习笔记5函数</title>
    <url>/2020/02/08/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><p>使用关键字<strong>def</strong>，定义以冒号结尾。</p>
<h1 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h1><h2 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h2><p>要求<strong>实参</strong>的顺序和<strong>形参</strong>的顺序相同</p>
<h2 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h2><p>每个实参都由变量名和值组成，即传递给函数的是<strong>名称-值对</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">describe_pet(animal_type=<span class="string">'hamster'</span>, pet_name=<span class="string">'harry'</span>) </span><br><span class="line">describe_pet(pet_name=<span class="string">'harry'</span>, animal_type=<span class="string">'hamster'</span>)</span><br></pre></td></tr></table></figure>

<p>编写函数时，可以给每个形参指定默认值</p>
<p><code>def describe_pet(pet_name, animal_type=&#39;dog&#39;):</code></p>
<p><font color=##FF0000>注意：使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。这让python能够正确地解读位置实参。</font></p>
<h2 id="禁止函数修改列表"><a href="#禁止函数修改列表" class="headerlink" title="禁止函数修改列表"></a>禁止函数修改列表</h2><p>要将列表的<strong>副本</strong>传递给函数，可以这样做</p>
<p><code>function_name(list_name[:])</code></p>
<h2 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h2><p><code>def function_name(*parameters)</code></p>
<p>符号*让python创建一个空元组，并将所有收到的值都封装到这个元组中。</p>
]]></content>
      <categories>
        <category>python入门</category>
      </categories>
  </entry>
  <entry>
    <title>python/python学习笔记4字典</title>
    <url>/2020/02/07/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<p>在python中，字典是一系列键-值对。每个键都与一个值相关联。用符号{}表示。</p>
<h1 id="删除键-值对"><a href="#删除键-值对" class="headerlink" title="删除键-值对"></a>删除键-值对</h1><p>可使用del语句</p>
<h1 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h1><h2 id="可声明两个变量，用于存储键-值对中的键和值"><a href="#可声明两个变量，用于存储键-值对中的键和值" class="headerlink" title="可声明两个变量，用于存储键-值对中的键和值"></a>可声明两个变量，用于存储键-值对中的键和值</h2><p>方法<code>items()</code></p>
<p><code>for key,value in dictionary.items():</code></p>
<h2 id="遍历键"><a href="#遍历键" class="headerlink" title="遍历键"></a>遍历键</h2><p>方法<code>keys()</code></p>
<p><code>for key in dictionary.keys()</code></p>
<h2 id="在遍历前按特定顺序排列"><a href="#在遍历前按特定顺序排列" class="headerlink" title="在遍历前按特定顺序排列"></a>在遍历前按特定顺序排列</h2><p>方法<code>keys()</code></p>
<p><code>for name in sorted(dictionary.keys())</code></p>
<h1 id="遍历值"><a href="#遍历值" class="headerlink" title="遍历值"></a>遍历值</h1><p>方法<code>values()</code></p>
<p><code>for value in dictionary.values()</code></p>
]]></content>
      <categories>
        <category>python入门</category>
      </categories>
  </entry>
  <entry>
    <title>CSS/CSS样式</title>
    <url>/2020/02/05/CSS/CSS%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-attachment		背景图像是否固定或随着页面的其余部分滚动</span><br><span class="line">background-color			设置元素的背景颜色</span><br><span class="line">background-image			把图片设置为背景</span><br><span class="line">background-position			设置背景图片的起始位置</span><br><span class="line">background-repeat			设置背景图片是否及如何重复</span><br><span class="line">background-size				规定背景图片的尺寸</span><br><span class="line">background-origin			规定背景图片的定位区域</span><br><span class="line">background-clip				规定背景的绘制区域</span><br></pre></td></tr></table></figure>



<h1 id="CSS文本"><a href="#CSS文本" class="headerlink" title="CSS文本"></a>CSS文本</h1><p>CSS文本属性可定义文本外观</p>
<p>通过文本属性，可以改变文本的颜色、字符间距、对其文本、装饰文本、对文本缩进</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">color			文本颜色</span><br><span class="line">direction		文本方向</span><br><span class="line">line-height		行高</span><br><span class="line">letter-spacing	字符间距</span><br><span class="line">text-align		对齐元素中的文本</span><br><span class="line">text-decoration	向本文添加修饰</span><br><span class="line">text-transform	元素中的字母</span><br><span class="line">unicode-bidi	设置文本方向</span><br><span class="line">white-space		元素中空白的处理方式</span><br><span class="line">word-spacing	字间距</span><br><span class="line">text-shadow		向文本添加阴影	//4个参数</span><br><span class="line">word-show		规定文本的换行规则</span><br></pre></td></tr></table></figure>



<h1 id="CSS字体"><a href="#CSS字体" class="headerlink" title="CSS字体"></a>CSS字体</h1><p>CSS字体属性定义文本的字体系列、大小、加粗、风格和变形</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family		设置字体系列</span><br><span class="line">font-size		设置字体的尺寸</span><br><span class="line">font-style		设置字体风格</span><br><span class="line">font-variant	以小型大写字体或正常字体显示文字</span><br><span class="line">font-weight		设置字体的粗细</span><br></pre></td></tr></table></figure>



<h1 id="CSS链接"><a href="#CSS链接" class="headerlink" title="CSS链接"></a>CSS链接</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:link		普通的，未被访问的链接</span><br><span class="line">a:visited	用户已访问的链接</span><br><span class="line">a:hover		鼠标指针位于链接的上方</span><br><span class="line">a:active	链接被点击的时刻</span><br><span class="line">text:decoration	属性大多用于去掉链接中的下划线</span><br></pre></td></tr></table></figure>



<h1 id="CSS列表"><a href="#CSS列表" class="headerlink" title="CSS列表"></a>CSS列表</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list-style			简写列表项</span><br><span class="line">list-style-image	列表项图像</span><br><span class="line">list-style-position	列表标志位置</span><br><span class="line">list-style-type		列表类型</span><br></pre></td></tr></table></figure>



<h1 id="CSS表格"><a href="#CSS表格" class="headerlink" title="CSS表格"></a>CSS表格</h1><p>1、CSS表格属性</p>
<p>2、表格边框</p>
<p>3、折叠边框</p>
<p>4、表格宽高</p>
<p>5、表格文本对齐</p>
<p>6、表格内边距</p>
<p>7、表格颜色</p>
<h1 id="CSS轮廓"><a href="#CSS轮廓" class="headerlink" title="CSS轮廓"></a>CSS轮廓</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">outline             设置轮廓属性</span><br><span class="line">outline-color		设置轮廓的颜色</span><br><span class="line">outline-style		设置轮廓的样式</span><br><span class="line">outline-width		设置轮廓的宽度</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>python/python学习笔记3条件语句</title>
    <url>/2020/02/05/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h1><h2 id="检查特定值是否包含在列表中"><a href="#检查特定值是否包含在列表中" class="headerlink" title="检查特定值是否包含在列表中"></a>检查特定值是否包含在列表中</h2><p>使用关键字in</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requested_toppings = [&apos;mushrooms&apos;, &apos;onions&apos;, &apos;pineapple&apos;] </span><br><span class="line">&gt;&gt;&gt; &apos;mushrooms&apos; in requested_toppings</span><br><span class="line">True </span><br><span class="line">&gt;&gt;&gt; &apos;pepperoni&apos; in requested_toppings </span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>相反，使用not in特定值是否不包含在列表中</p>
]]></content>
      <categories>
        <category>python入门</category>
      </categories>
  </entry>
  <entry>
    <title>python/python学习笔记2列表</title>
    <url>/2020/02/05/python/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="列表索引"><a href="#列表索引" class="headerlink" title="列表索引"></a>列表索引</h1><p>将索引指定为-1，可让python返回最后一个列表元素。</p>
<p>同样，索引-2返回倒数第二个列表元素，索引-3返回倒数第三个列表元素，以此类推。</p>
<h1 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h1><h2 id="1、在列表末尾添加元素"><a href="#1、在列表末尾添加元素" class="headerlink" title="1、在列表末尾添加元素"></a>1、在列表末尾添加元素</h2><p>方法<code>append(添加的元素)</code></p>
<h2 id="2、在列表任意位置添加元素"><a href="#2、在列表任意位置添加元素" class="headerlink" title="2、在列表任意位置添加元素"></a>2、在列表任意位置添加元素</h2><p>方法<code>insert(插入的位置，添加的元素)</code></p>
<h1 id="从列表中删除元素"><a href="#从列表中删除元素" class="headerlink" title="从列表中删除元素"></a>从列表中删除元素</h1><h2 id="1、使用del语句删除元素"><a href="#1、使用del语句删除元素" class="headerlink" title="1、使用del语句删除元素"></a>1、使用del语句删除元素</h2><p>前提：知道要删除的元素在列表的位置</p>
<p><code>del list[index]</code></p>
<h2 id="2、使用pop-方法删除元素"><a href="#2、使用pop-方法删除元素" class="headerlink" title="2、使用pop()方法删除元素"></a>2、使用pop()方法删除元素</h2><p>方法pop()可以删除列表末尾的元素，并且能够继续使用该元素</p>
<p><code>popped = list.pop()</code></p>
<p>增加参数可以弹出任意位置的元素</p>
<p><code>popped = list.pop(index)</code></p>
<h2 id="3、根据值删除元素"><a href="#3、根据值删除元素" class="headerlink" title="3、根据值删除元素"></a>3、根据值删除元素</h2><p>方法<code>remove(要删除元素的值)</code></p>
<p>该方法也可以继续使用它的值</p>
<p><font color = #FF0000>*注意：如果列表中有重复的值，remove()只能删除第一个指定的值</font></p>
<h1 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h1><h2 id="使用sort-对列表进行永久性排序"><a href="#使用sort-对列表进行永久性排序" class="headerlink" title="使用sort()对列表进行永久性排序"></a>使用sort()对列表进行永久性排序</h2><p>按照字母顺序排序。</p>
<p>如果需要按字母顺序相反的顺序排列元素，则需向sort()方法传递参数reverse=True。</p>
<p><code>list.sort(reverse=True)</code></p>
<h2 id="使用sorted-对列表进行临时排序"><a href="#使用sorted-对列表进行临时排序" class="headerlink" title="使用sorted()对列表进行临时排序"></a>使用sorted()对列表进行临时排序</h2><p><code>print(sorted(list))</code></p>
<h2 id="倒着打印列表"><a href="#倒着打印列表" class="headerlink" title="倒着打印列表"></a>倒着打印列表</h2><p>方法<code>reverse()</code></p>
<h2 id="确定列表的长度"><a href="#确定列表的长度" class="headerlink" title="确定列表的长度"></a>确定列表的长度</h2><p>函数<code>len()</code></p>
<h1 id="数值列表"><a href="#数值列表" class="headerlink" title="数值列表"></a>数值列表</h1><h2 id="使用函数range"><a href="#使用函数range" class="headerlink" title="使用函数range()"></a>使用函数range()</h2><p>函数range()让python从指定的第一个值开始计数，在达到第二个值后停止，因此输出不包括第二个值。</p>
<p>还可以指定步长<code>even_numbers = list(range(2,11,2))    //打印1~10之内的偶数</code></p>
<h2 id="使用list-创建数字列表"><a href="#使用list-创建数字列表" class="headerlink" title="使用list()创建数字列表"></a>使用list()创建数字列表</h2><p><code>numbers = list(range(1,6))</code></p>
<h2 id="一些简单的统计计算"><a href="#一些简单的统计计算" class="headerlink" title="一些简单的统计计算"></a>一些简单的统计计算</h2><p>min()    找出最小值</p>
<p>max()    找出最大值</p>
<p>sum()    找出总和</p>
<h1 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h1><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">players = [<span class="string">'charkes'</span>,<span class="string">'martina'</span>,<span class="string">'michael'</span>,<span class="string">'florence'</span>,<span class="string">'eli'</span>]</span><br><span class="line">print(players[<span class="number">0</span>:<span class="number">3</span>])	//这将输出<span class="number">0</span>，<span class="number">1</span>，<span class="number">2</span>的元素，即第<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>个元素</span><br></pre></td></tr></table></figure>

<p>如果没有指定起始索引，python从列表开头开始提取，要让切片终止于列表末尾，也可以使用类似的语法</p>
<p><code>print(players[-3:])        //打印最后三名队员的名字</code>    </p>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p><code>players_two = player[:]</code></p>
<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p>不可变的列表。不同于列表用[]表示，元组使用()表示</p>
<p><code>dimension = (200,50)</code></p>
<h2 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h2><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值。即重新定义整个元组</p>
]]></content>
      <categories>
        <category>python入门</category>
      </categories>
  </entry>
  <entry>
    <title>CSS/CSS基础</title>
    <url>/2020/02/04/CSS/CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h1><p>1.selector{</p>
<p>​    property:value</p>
<p>}</p>
<p>例：<code>h1{color:red;font-size:14px}</code></p>
<p>属性大于1个之后，属性之间用分号隔开</p>
<p>如果值大于1个单词，则需要加上引号:</p>
<p><code>p{font-family:&quot;sans serif&quot;;}</code></p>
<h1 id="CSS高级语法"><a href="#CSS高级语法" class="headerlink" title="CSS高级语法"></a>CSS高级语法</h1><h2 id="1、选择器分组："><a href="#1、选择器分组：" class="headerlink" title="1、选择器分组："></a>1、选择器分组：</h2><p>h1,h2,h3,h4,h5,h6{color:red;}</p>
<h2 id="2、继承："><a href="#2、继承：" class="headerlink" title="2、继承："></a>2、继承：</h2><p>body{</p>
<p>​    color:green;</p>
<p>}</p>
<h1 id="派生选择器"><a href="#派生选择器" class="headerlink" title="派生选择器"></a>派生选择器</h1><p>1、通过依据元素在其位置的上下文关系来定义样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">strong</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>p标签hello css<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>li标签：Hello css<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时列表项中strong的元素为红色，p标签strong元素为紫色。</p>
<h1 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h1><h2 id="1、id选择器"><a href="#1、id选择器" class="headerlink" title="1、id选择器"></a>1、id选择器</h2><ul>
<li>id选择器可以为标有id的HTML元素指定特定的样式</li>
<li>id选择器以“#”定义</li>
</ul>
<h2 id="2、id选择器和派生选择器"><a href="#2、id选择器和派生选择器" class="headerlink" title="2、id选择器和派生选择器"></a>2、id选择器和派生选择器</h2><p>目前比较常用的方法是id选择器常常用于建立派生选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#divid</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divid"</span>&gt;</span></span><br><span class="line">        这是第一个div<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第二个div<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二条语句变红，第一条语句不变</p>
<h1 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h1><h2 id="1、类选择器"><a href="#1、类选择器" class="headerlink" title="1、类选择器"></a>1、类选择器</h2><p>类选择器以一个点显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.pclass&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、class也可以用作派生选择器"><a href="#2、class也可以用作派生选择器" class="headerlink" title="2、class也可以用作派生选择器"></a>2、class也可以用作派生选择器</h2><h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1><h2 id="1、属性选择器："><a href="#1、属性选择器：" class="headerlink" title="1、属性选择器："></a>1、属性选择器：</h2><p>对带有指定属性的HTML元素设置样式</p>
<h2 id="2、属性和值选择器"><a href="#2、属性和值选择器" class="headerlink" title="2、属性和值选择器"></a>2、属性和值选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-attr">[title]</span>&#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-attr">[title=te]</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"t"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"te"</span>&gt;</span>属性和值选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一个title为蓝色，第二个title为红色</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>python/pyhton学习笔记1字符串</title>
    <url>/2020/02/04/python/pyhton%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="修改大小写"><a href="#修改大小写" class="headerlink" title="修改大小写"></a>修改大小写</h1><ul>
<li>以首字母大写的方式显示每个单词</li>
</ul>
<p><code>.title()</code></p>
<ul>
<li>全部大写</li>
</ul>
<p><code>.upper()</code></p>
<ul>
<li>全部小写</li>
</ul>
<p><code>.lower()</code></p>
<h1 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h1><ul>
<li>找出字符串开头和末尾多余的空白，但是只是暂时的</li>
</ul>
<p><code>.rstrip()</code></p>
<ul>
<li>剔除开头的空白</li>
</ul>
<p><code>.lstrip()</code></p>
<ul>
<li>剔除两端的空白</li>
</ul>
<p><code>.strip</code></p>
]]></content>
      <categories>
        <category>python入门</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML新增的非主体结构元素</title>
    <url>/2020/02/01/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%96%B0%E5%A2%9E%E7%9A%84%E9%9D%9E%E4%B8%BB%E4%BD%93%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="header元素"><a href="#header元素" class="headerlink" title="header元素"></a>header元素</h1><p>header元素是一种具有引导和导航作用的结构元素，通常用来放置整个页面或页面内的一个内容区块的标题，但是也可以包含其他内容，例如数据表格、搜索表单或相关的logo图片</p>
<h1 id="footer元素"><a href="#footer元素" class="headerlink" title="footer元素"></a>footer元素</h1><p>footer元素可以作为其上层父级内容区块或是一个根区块的脚注。footer通常包括其相关区域的脚注信息，如作者、相关阅读链接及版权信息等。</p>
<h1 id="hgroup元素"><a href="#hgroup元素" class="headerlink" title="hgroup元素"></a>hgroup元素</h1><p>hgroup元素是将标题及其子标题进行分组的标题。hgroup元素通常会将h1~h6元素进行分组，譬如一个内容区块的标题及其子元素算一组。</p>
<h1 id="address元素"><a href="#address元素" class="headerlink" title="address元素"></a>address元素</h1><p>address元素用来在文档中呈现联系信息，包括文档作者或文档维护者的名字、他们的网站链接、电子邮箱、真实地址、电话号码等。address应该不只用来呈现电子邮箱或真实地址，还用来展示跟文档相关的联系人的所有联系信息。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML新增的主体结构元素</title>
    <url>/2020/01/31/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E4%BD%93%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="aside元素"><a href="#aside元素" class="headerlink" title="aside元素"></a>aside元素</h1><p>aside元素用来表示当前页面或文章的附属信息部分，它可以包含与当前页面或主要内容相关的引用、侧边栏、广告、导航条，以及其他类型的有区别于主要内容的部分。</p>
<h1 id="time元素与微格式"><a href="#time元素与微格式" class="headerlink" title="time元素与微格式"></a>time元素与微格式</h1>]]></content>
  </entry>
  <entry>
    <title>机器学习/course5 1.10GRU&LSTM</title>
    <url>/2020/01/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/course5%201.10GRU&amp;LSTM/</url>
    <content><![CDATA[<p>原文链接： <a href="https://www.jianshu.com/p/591fd8b5bbd0" target="_blank" rel="noopener">https://www.jianshu.com/p/591fd8b5bbd0</a> </p>
<img src="https://upload-images.jianshu.io/upload_images/19896587-485eaf5f683112c4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp">



<p>reset gate <img src="https://math.jianshu.com/math?formula=r_t" alt="r_t"> 、update gate <img src="https://math.jianshu.com/math?formula=z_t" alt="z_t"> 、候选隐藏层<img src="https://math.jianshu.com/math?formula=%5Ctilde%7Bh%7D_%7Bt%7D" alt="\tilde{h}_{t}"> （与 LSTM 的<img src="https://math.jianshu.com/math?formula=%5Ctilde%7Bc%7D_%7Bt%7D" alt="\tilde{c}_{t}">)类似，可以看成是当前时刻的新信息，其中<img src="https://math.jianshu.com/math?formula=r_t" alt="r_t">用来控制需要保留多少之前的记忆）</p>
<p>为了克服RNN 无法很好处理远距离依赖而提出了 LSTM，而 GRU 是LSTM 的一个变体，GRU 保持了 LSTM 的效果同时又使结构更加简单。<br> GRU 只剩下两个门，即<strong>更新门</strong>和<strong>重置门</strong>。更新门用于控制前一时刻的状态信息被代入到当前状态的程，更新门的值越大说明前一时刻的状态信息带入越多。重置门用于控制忽略前一时刻的状态信息的程度，重置门的值越小说明忽略得越多。</p>
<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Barray%7D%7Bc%7D%7Br_%7Bt%7D%3D%5Csigma%5Cleft(W_%7Br%7D%20%5Ccdot%5Cleft%5Bh_%7Bt-1%7D%2C%20x_%7Bt%7D%5Cright%5D%5Cright)%7D%20%5C%5C%20%7Bz_%7Bt%7D%3D%5Csigma%5Cleft(W_%7Bz%7D%20%5Ccdot%5Cleft%5Bh_%7Bt-1%7D%2C%20x_%7Bt%7D%5Cright%5D%5Cright)%7D%20%5C%5C%20%7B%5Ctilde%7Bh%7D_%7Bt%7D%3D%5Ctanh%20%5Cleft(W_%7B%5Coverline%7Bh%7D%7D%20%5Ccdot%5Cleft%5Br_%7Bt%7D%20*%20h_%7Bt-1%7D%2C%20x_%7Bt%7D%5Cright%5D%5Cright)%7D%20%5C%5C%20%7Bh_%7Bt%7D%3D%5Cleft(1-z_%7Bt%7D%5Cright)%20*%20h_%7Bt-1%7D%2Bz_%7Bt%7D%20*%20%5Ctilde%7Bh%7D_%7Bt%7D%7D%20%5C%5C%20%7By_%7Bt%7D%3D%5Csigma%5Cleft(W_%7Bo%7D%20%5Ccdot%20h_%7Bt%7D%5Cright)%7D%5Cend%7Barray%7D" alt="\begin{array}{c}{r_{t}=\sigma\left(W_{r} \cdot\left[h_{t-1}, x_{t}\right]\right)} \\ {z_{t}=\sigma\left(W_{z} \cdot\left[h_{t-1}, x_{t}\right]\right)} \\ {\tilde{h}_{t}=\tanh \left(W_{\overline{h}} \cdot\left[r_{t} * h_{t-1}, x_{t}\right]\right)} \\ {h_{t}=\left(1-z_{t}\right) * h_{t-1}+z_{t} * \tilde{h}_{t}} \\ {y_{t}=\sigma\left(W_{o} \cdot h_{t}\right)}\end{array}"></p>
<p>其中，<img src="https://math.jianshu.com/math?formula=W_r%2CW_z%2CW_h" alt="W_r,W_z,W_h">都是拼接的，比如<img src="https://math.jianshu.com/math?formula=W_r%20%3D%20W_%7Brx%7D%2BW_%7Brh%7D" alt="W_r = W_{rx}+W_{rh}">，所以在学习时要分开来</p>
<p>第三式通过重置门重置后的<img src="https://math.jianshu.com/math?formula=h_%7Bt-1%7D" alt="h_{t-1}">与输入拼接，在通过 tanh激活函数得到 h’</p>
<p>最后一步记忆更新阶段，利用更新门来控制，更新门越接近1，代表记忆下来的数据越多。</p>
<p>GRU 相比LSTM，能够达到相当的效果，同时更加容易训练。GRU 使用了一个门控z 就可以进行遗忘和选择记忆，而 LSTM 要使用多个门控。</p>
<p>原文链接： <a href="https://zhuanlan.zhihu.com/p/32481747" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32481747</a> </p>
<h2 id="1-什么是GRU"><a href="#1-什么是GRU" class="headerlink" title="1. 什么是GRU"></a>1. 什么是GRU</h2><p>GRU（Gate Recurrent Unit）是循环神经网络（Recurrent Neural Network, RNN）的一种。和LSTM（Long-Short Term Memory）一样，也是为了解决长期记忆和反向传播中的梯度等问题而提出来的。</p>
<p>GRU和LSTM在很多情况下实际表现上相差无几，那么为什么我们要使用新人GRU（2014年提出）而不是相对经受了更多考验的LSTM（1997提出）呢。</p>
<p>下图1-1引用论文中的一段话来说明GRU的优势所在。</p>
<p><img src="https://pic4.zhimg.com/80/v2-a8424cd80eae1b7d312991692decbe8b_hd.jpg" alt="img">图1-1 R-NET: MACHINE READING COMPREHENSION WITH SELF-MATCHING NETWORKS（2017）</p>
<blockquote>
<p>简单译文：我们在我们的实验中选择GRU是因为它的实验效果与LSTM相似，但是更易于计算。</p>
</blockquote>
<p><strong>简单来说就是贫穷限制了我们的计算能力…</strong></p>
<p>相比LSTM，使用GRU能够达到相当的效果，并且相比之下更容易进行训练，能够很大程度上提高训练效率，因此很多时候会更倾向于使用GRU。</p>
<p>OK，那么为什么说GRU更容易进行训练呢，下面开始介绍一下GRU的内部结构。</p>
<hr>
<h2 id="2-GRU浅析"><a href="#2-GRU浅析" class="headerlink" title="2. GRU浅析"></a>2. GRU浅析</h2><h2 id="2-1-GRU的输入输出结构"><a href="#2-1-GRU的输入输出结构" class="headerlink" title="2.1 GRU的输入输出结构"></a>2.1 GRU的输入输出结构</h2><p>GRU的输入输出结构与普通的RNN是一样的。</p>
<p>有一个当前的输入 <img src="https://www.zhihu.com/equation?tex=x%5Et" alt="[公式]"> ，和上一个节点传递下来的隐状态（hidden state） <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> ，这个隐状态包含了之前节点的相关信息。</p>
<p>结合 <img src="https://www.zhihu.com/equation?tex=x%5Et+" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]">，GRU会得到当前隐藏节点的输出 <img src="https://www.zhihu.com/equation?tex=y%5Et+" alt="[公式]"> 和传递给下一个节点的隐状态 <img src="https://www.zhihu.com/equation?tex=h%5Et" alt="[公式]"> 。</p>
<p><img src="https://pic2.zhimg.com/80/v2-49244046a83e30ef2383b94644bf0f31_hd.jpg" alt="img">图2-1 GRU的输入输出结构</p>
<p>那么，GRU到底有什么特别之处呢？下面来对它的内部结构进行分析！</p>
<hr>
<h2 id="2-2-GRU的内部结构"><a href="#2-2-GRU的内部结构" class="headerlink" title="2.2 GRU的内部结构"></a>2.2 GRU的内部结构</h2><p>首先，我们先通过上一个传输下来的状态 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> 和当前节点的输入 <img src="https://www.zhihu.com/equation?tex=x%5Et" alt="[公式]"> 来获取两个门控状态。如下图2-2所示，其中 <img src="https://www.zhihu.com/equation?tex=r+" alt="[公式]"> 控制重置的门控（reset gate）， <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 为控制更新的门控（update gate）。</p>
<blockquote>
<p>Tips： <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> 为*<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Sigmoid_function">sigmoid</a>*函数，通过这个函数可以将数据变换为0-1范围内的数值，从而来充当门控信号。</p>
</blockquote>
<p><img src="https://pic3.zhimg.com/80/v2-7fff5d817530dada1b279c7279d73b8a_hd.jpg" alt="img">图2-2 r，z门控</p>
<p><strong>与LSTM分明的层次结构不同，下面将对GRU进行一气呵成的介绍<del>~</del> 请大家屏住呼吸，不要眨眼。</strong></p>
<p>得到门控信号之后，首先使用重置门控来得到<strong>“重置”</strong>之后的数据 <img src="https://www.zhihu.com/equation?tex=%7Bh%5E%7Bt-1%7D%7D%27+%3D+h%5E%7Bt-1%7D+%5Codot+r+" alt="[公式]"> ，再将 <img src="https://www.zhihu.com/equation?tex=%7Bh%5E%7Bt-1%7D%7D%27" alt="[公式]"> 与输入 <img src="https://www.zhihu.com/equation?tex=x%5Et+" alt="[公式]"> 进行拼接，再通过一个<a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/tanh">tanh</a>激活函数来将数据放缩到<strong>-1~1</strong>的范围内。即得到如下图2-3所示的 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 。</p>
<p><img src="https://pic4.zhimg.com/80/v2-390781506bbebbef799f1a12acd7865b_hd.jpg" alt="img">图2-3 包含当前输入数据的h&amp;amp;#39;</p>
<p>这里的 <img src="https://www.zhihu.com/equation?tex=h%27+" alt="[公式]"> 主要是包含了当前输入的 <img src="https://www.zhihu.com/equation?tex=x%5Et" alt="[公式]"> 数据。有针对性地对 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 添加到当前的隐藏状态，相当于”记忆了当前时刻的状态“。类似于LSTM的选择记忆阶段（参照我的上一篇文章）。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8134a00c243153bfd9fd2bcbe0844e9c_hd.jpg" alt="img">图2-3 GRU的内部结构</p>
<blockquote>
<p>图2-3中的 <img src="https://www.zhihu.com/equation?tex=%5Codot" alt="[公式]"> 是Hadamard Product，也就是操作矩阵中对应的元素相乘，因此要求两个相乘矩阵是同型的。 <img src="https://www.zhihu.com/equation?tex=%5Coplus" alt="[公式]"> 则代表进行矩阵加法操作。</p>
</blockquote>
<hr>
<p>最后介绍GRU最关键的一个步骤，我们可以称之为<strong>”更新记忆“</strong>阶段。</p>
<p>在这个阶段，我们同时进行了遗忘了记忆两个步骤。我们使用了先前得到的更新门控 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> （update gate）。</p>
<p><strong>更新表达式</strong>： <img src="https://www.zhihu.com/equation?tex=h%5Et+%3D+z+%5Codot+h%5E%7Bt-1%7D+%2B+%281+-+z%29%5Codot+h%27" alt="[公式]"></p>
<p>首先再次强调一下，门控信号（这里的 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> ）的范围为0~1。门控信号越接近1，代表”记忆“下来的数据越多；而越接近0则代表”遗忘“的越多。</p>
<p>GRU很聪明的一点就在于，<strong>我们使用了同一个门控 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 就同时可以进行遗忘和选择记忆（LSTM则要使用多个门控）</strong>。</p>
<ul>
<li><img src="https://www.zhihu.com/equation?tex=z+%5Codot+h%5E%7Bt-1%7D" alt="[公式]"> ：表示对原本隐藏状态的选择性“遗忘”。这里的 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 可以想象成遗忘门（forget gate），忘记 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> 维度中一些不重要的信息。</li>
<li><img src="https://www.zhihu.com/equation?tex=%281-z%29+%5Codot+h%27" alt="[公式]"> ： 表示对包含当前节点信息的 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 进行选择性”记忆“。与上面类似，这里的 <img src="https://www.zhihu.com/equation?tex=%281-z%29" alt="[公式]"> 同理会忘记 <img src="https://www.zhihu.com/equation?tex=h+%27" alt="[公式]"> 维度中的一些不重要的信息。或者，这里我们更应当看做是对 <img src="https://www.zhihu.com/equation?tex=h%27+" alt="[公式]"> 维度中的某些信息进行选择。</li>
<li><img src="https://www.zhihu.com/equation?tex=h%5Et+%3D+z+%5Codot+h%5E%7Bt-1%7D+%2B+%281+-+z%29%5Codot+h%27" alt="[公式]"> ：结合上述，这一步的操作就是忘记传递下来的 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D+" alt="[公式]"> 中的某些维度信息，并加入当前节点输入的某些维度信息。</li>
</ul>
<blockquote>
<p>可以看到，这里的遗忘 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 和选择 <img src="https://www.zhihu.com/equation?tex=%281-z%29" alt="[公式]"> 是联动的。也就是说，对于传递进来的维度信息，我们会进行选择性遗忘，则遗忘了多少权重 （<img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> ），我们就会使用包含当前输入的 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 中所对应的权重进行弥补 <img src="https://www.zhihu.com/equation?tex=%281-z%29" alt="[公式]"> 。以保持一种”恒定“状态。</p>
</blockquote>
<hr>
<h2 id="3-LSTM与GRU的关系"><a href="#3-LSTM与GRU的关系" class="headerlink" title="3. LSTM与GRU的关系"></a>3. LSTM与GRU的关系</h2><p>GRU是在2014年提出来的，而LSTM是1997年。他们的提出都是为了解决相似的问题，那么GRU难免会参考LSTM的内部结构。那么他们之间的关系大概是怎么样的呢？这里简单介绍一下。</p>
<p>大家看到 <img src="https://www.zhihu.com/equation?tex=r" alt="[公式]"> (reset gate)实际上与他的名字有点不符。我们仅仅使用它来获得了 <img src="https://www.zhihu.com/equation?tex=h%E2%80%99" alt="[公式]"> 。</p>
<p>那么这里的 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 实际上可以看成对应于LSTM中的hidden state；上一个节点传下来的 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> 则对应于LSTM中的cell state。z对应的则是LSTM中的 <img src="https://www.zhihu.com/equation?tex=z%5Ef" alt="[公式]"> forget gate，那么 <img src="https://www.zhihu.com/equation?tex=%281-z%29" alt="[公式]"> 我们似乎就可以看成是选择门 <img src="https://www.zhihu.com/equation?tex=z%5Ei" alt="[公式]"> 了。大家可以结合我的两篇文章来进行观察，这是非常有趣的。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>GRU输入输出的结构与普通的RNN相似，其中的内部思想与LSTM相似。</p>
<p>与LSTM相比，GRU内部少了一个”门控“，参数比LSTM少，但是却也能够达到与LSTM相当的功能。考虑到硬件的<strong>计算能力</strong>和<strong>时间成本</strong>，因而很多时候我们也就会选择更加”实用“的GRU啦。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML框架 背景 实体</title>
    <url>/2020/01/29/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%A1%86%E6%9E%B6%20%E8%83%8C%E6%99%AF%20%E5%AE%9E%E4%BD%93/</url>
    <content><![CDATA[<h1 id="HTML框架"><a href="#HTML框架" class="headerlink" title="HTML框架"></a>HTML框架</h1><p>1、框架标签（frame）</p>
<p>框架对于页面的设计有着很大的作用</p>
<p>2、框架集标签（&lt;frameset&gt;）</p>
<p>框架集标签定义如何将窗口分割为框架</p>
<p>每一个frameset定义一系列行或列</p>
<p>rows/cols的值规定了每行或每列占据屏幕的面积</p>
<p>3、常用标签：</p>
<p>noresize:固定框架大小</p>
<p>cols:列</p>
<p>rows:行</p>
<p>4、内联框架</p>
<p>iframe</p>
<h1 id="HTML背景"><a href="#HTML背景" class="headerlink" title="HTML背景"></a>HTML背景</h1><h3 id="1、背景标签"><a href="#1、背景标签" class="headerlink" title="1、背景标签"></a>1、背景标签</h3><p>​    background</p>
<h3 id="2、背景颜色"><a href="#2、背景颜色" class="headerlink" title="2、背景颜色"></a>2、背景颜色</h3><p>   bgcolor</p>
<h3 id="3、背景颜色"><a href="#3、背景颜色" class="headerlink" title="3、背景颜色"></a>3、背景颜色</h3><p>颜色是由一个十六进制符号来定义、这个符号由红色绿色蓝色的值组成（RGB）</p>
<p>颜色值最小值：0(#00)</p>
<p>颜色值最大值：255(#FF)</p>
<p>红色：#FF0000 绿色：#00FF00 蓝色：#0000FF</p>
<h1 id="HTML实体"><a href="#HTML实体" class="headerlink" title="HTML实体"></a>HTML实体</h1><h3 id="1、实体"><a href="#1、实体" class="headerlink" title="1、实体"></a>1、实体</h3><p>HTML中预留字符串必须被替换成字符实体</p>
<p>如：&lt;、&gt;、&amp;</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML表单</title>
    <url>/2020/01/28/HTML%E5%AD%A6%E4%B9%A0/HTML%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h1 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h1><p>表单用于获取不同类型的用户输入</p>
<p>常用表单标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;			表单</span><br><span class="line">&lt;input&gt;			输入域</span><br><span class="line">&lt;textarea&gt;		文本域</span><br><span class="line">&lt;label&gt;			控制标签</span><br><span class="line">&lt;fieldset&gt;		定义域</span><br><span class="line">&lt;legend&gt;		域的标题</span><br><span class="line">&lt;select&gt;		选择列表</span><br><span class="line">&lt;optgroup&gt;		选项组</span><br><span class="line">&lt;option&gt;		下拉列表中的表项</span><br><span class="line">&lt;button&gt;		按钮</span><br></pre></td></tr></table></figure>

<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><h4 id="1、复选框"><a href="#1、复选框" class="headerlink" title="1、复选框"></a>1、复选框</h4><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code></p>
<h4 id="2、单选按钮"><a href="#2、单选按钮" class="headerlink" title="2、单选按钮"></a>2、单选按钮</h4><p><code>&lt;input type=&quot;radio&quot; name=&quot;...&quot;&gt;    //name属性需要相同</code></p>
<h4 id="3、下拉列表"><a href="#3、下拉列表" class="headerlink" title="3、下拉列表"></a>3、下拉列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>www.baidu.com<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>https://yuanzhiqj.github.io<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、文本域"><a href="#4、文本域" class="headerlink" title="4、文本域"></a>4、文本域</h4><p><code>&lt;textarea cols=&quot;30&quot; rows=&quot;30&quot;&gt;请在此填写&lt;/textarea&gt;</code></p>
<h4 id="5、创建按钮"><a href="#5、创建按钮" class="headerlink" title="5、创建按钮"></a>5、创建按钮</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="表单与php交互"><a href="#表单与php交互" class="headerlink" title="表单与php交互"></a>表单与php交互</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">form action="" method="get"&gt;</span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML列表 块 布局</title>
    <url>/2020/01/27/HTML%E5%AD%A6%E4%B9%A0/HTML%E5%88%97%E8%A1%A8%20%E5%9D%97%20%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>				有序列表	//单元前面有顺序标识</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>				无序列表	//单元前面只有·</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>				列表项</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>				列表</span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>				列表项</span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>				描述</span><br></pre></td></tr></table></figure>

<h3 id="1、无序列表"><a href="#1、无序列表" class="headerlink" title="1、无序列表"></a>1、无序列表</h3><p>使用标签:&lt;ul&gt;&lt;li&gt;</p>
<p>属性：disc（实心圆）、circle（空心圆）、square（方块）</p>
<h3 id="2、有序列表"><a href="#2、有序列表" class="headerlink" title="2、有序列表"></a>2、有序列表</h3><p>使用标签:&lt;ol&gt;&lt;li&gt;</p>
<p>属性：A（大写）、a（小写）、l（大写罗马）、i（小写罗马）、start（数字，可指定开始数）</p>
<h3 id="3、嵌套列表"><a href="#3、嵌套列表" class="headerlink" title="3、嵌套列表"></a>3、嵌套列表</h3><p>使用标签:&lt;ul&gt;&lt;ol&gt;&lt;li&gt;</p>
<h3 id="4、自定义列表"><a href="#4、自定义列表" class="headerlink" title="4、自定义列表"></a>4、自定义列表</h3><p>使用标签:&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</p>
<h1 id="HTML块"><a href="#HTML块" class="headerlink" title="HTML块"></a>HTML块</h1><h3 id="1、HTML块元素"><a href="#1、HTML块元素" class="headerlink" title="1、HTML块元素"></a>1、HTML块元素</h3><p>块元素在显示时，通常会以新行开始</p>
<p>如：&lt;h1&gt;&lt;p&gt;&lt;ul&gt;</p>
<h3 id="2、HTML内联元素"><a href="#2、HTML内联元素" class="headerlink" title="2、HTML内联元素"></a>2、HTML内联元素</h3><p>内联元素通常不会以新行开始</p>
<p>如：&lt;b&gt;&lt;a&gt;&lt;img&gt;</p>
<h3 id="3、HTML-lt-div-gt-元素"><a href="#3、HTML-lt-div-gt-元素" class="headerlink" title="3、HTML&lt;div&gt;元素"></a>3、HTML&lt;div&gt;元素</h3><p>&lt;div&gt;元素也被称为块元素、其主要是组合HTML元素的容器</p>
<h3 id="4、HTML-lt-span-gt-元素"><a href="#4、HTML-lt-span-gt-元素" class="headerlink" title="4、HTML&lt;span&gt;元素"></a>4、HTML&lt;span&gt;元素</h3><p>&lt;span&gt;元素是内联元素、可作为文本的容器</p>
<h1 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>table布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">marginheight</span>=<span class="string">"0px"</span> <span class="attr">marginwidth</span>=<span class="string">"0px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"950px"</span> <span class="attr">style</span>=<span class="string">"background-color: darkgray"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"10%"</span> <span class="attr">style</span>=<span class="string">"background-color: aqua"</span>&gt;</span>head<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>  <span class="attr">width</span>=<span class="string">"30%"</span> <span class="attr">height</span>=<span class="string">"80%"</span> <span class="attr">style</span>=<span class="string">"background-color: blue"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>  <span class="attr">width</span>=<span class="string">"70%"</span> <span class="attr">height</span>=<span class="string">"80%"</span> <span class="attr">style</span>=<span class="string">"background-color: brown"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>  <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"10%"</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">style</span>=<span class="string">"background-color: black"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习/卷积神经网络</title>
    <url>/2020/01/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h1><p>valid卷积(不进行填充)：</p>
<p><code>nxn * fxf → n-f+1 x n-f+1</code></p>
<p>same卷积(卷积后与输出与输入尺寸一样)</p>
<p><code>n+2p-f+1 x n+2p-f+1</code></p>
<h1 id="卷积步长（stride）"><a href="#卷积步长（stride）" class="headerlink" title="卷积步长（stride）"></a>卷积步长（stride）</h1><p><code>(n+2p-f)/s+1 x (n+2p-f)/s+1               //向下取整</code></p>
<h1 id="三维卷积"><a href="#三维卷积" class="headerlink" title="三维卷积"></a>三维卷积</h1><p><code>nxnxnc * fxfxnc → n-f+1 x n-f+1 x nc&#39;</code></p>
<p>nc = nc </p>
<p>nc’为使用过滤器的数目</p>
<h1 id="单层卷积网络"><a href="#单层卷积网络" class="headerlink" title="单层卷积网络"></a>单层卷积网络</h1><p>f<sup>[l]</sup> = fliter size</p>
<p>p<sup>[l]</sup> = padding</p>
<p>s<sup>[l]</sup> = stride</p>
<p>nc<sup>[l]</sup> = number of fliters</p>
<p>Input: n<sub>H</sub><sup>[l-1]</sup> x n<sub>W</sub><sup>[l-1]</sup> x n<sub>C</sub><sup>[l-1]</sup></p>
<p>Output: n<sub>H</sub><sup>[l]</sup> x n<sub>W</sub><sup>[l]</sup> x n<sub>C</sub><sup>[l]</sup></p>
<h1 id="池化层（Pooling-layer）"><a href="#池化层（Pooling-layer）" class="headerlink" title="池化层（Pooling layer）"></a>池化层（Pooling layer）</h1><h3 id="最大池化-max-pooling"><a href="#最大池化-max-pooling" class="headerlink" title="最大池化(max pooling)"></a>最大池化(max pooling)</h3><p>取范围内的最大值，梯度下降无需改变任何值（即确定了超参）</p>
<p>常用：f=2,s=2。相当于高度宽度减半。</p>
<h3 id="平均池化-Average-pooling"><a href="#平均池化-Average-pooling" class="headerlink" title="平均池化(Average pooling)"></a>平均池化(Average pooling)</h3><p>范围内求平均值</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML样式</title>
    <url>/2020/01/17/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="HTML样式"><a href="#HTML样式" class="headerlink" title="HTML样式"></a>HTML样式</h1><h3 id="1、标签"><a href="#1、标签" class="headerlink" title="1、标签"></a>1、标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;:样式定义</span><br><span class="line">&lt;link&gt;:资源引用</span><br></pre></td></tr></table></figure>

<h3 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rel = &quot;stylesheet&quot;:外部样式表</span><br><span class="line">type = &quot;text/css&quot;:引入文档的类型</span><br><span class="line">margin-left:边距</span><br></pre></td></tr></table></figure>

<h3 id="3、三种样式表插入方法"><a href="#3、三种样式表插入方法" class="headerlink" title="3、三种样式表插入方法"></a>3、三种样式表插入方法</h3><p>外部样式表</p>
<p><code>&lt;link rel = &quot;stylesheet&quot;type=&quot;text/css&quot; href = &quot;mystyle.css&quot;&gt;</code></p>
<p>内部样式表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style type = &quot;text/css&quot;&gt;</span><br><span class="line">body&#123;background-color:red&#125;</span><br><span class="line">p&#123;margin-left:20px&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>内联样式表</p>
<p><code>&lt;p style = &quot;color:red&quot;&gt;</code></p>
<h1 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h1><h3 id="1、链接数据"><a href="#1、链接数据" class="headerlink" title="1、链接数据"></a>1、链接数据</h3><p>​    文本链接</p>
<p>​    图片链接</p>
<h3 id="2、属性-1"><a href="#2、属性-1" class="headerlink" title="2、属性"></a>2、属性</h3><p>​    href属性：指向另一个文档的链接</p>
<p>​    name属性：创建文档内的链接</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a name=&quot;tips&quot;&gt;hello&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;#tips&quot;&gt;跳转到hello&lt;/a&gt;	//跳转到tips所在的地方</span><br></pre></td></tr></table></figure></code></pre><h3 id="3、img标签属性"><a href="#3、img标签属性" class="headerlink" title="3、img标签属性"></a>3、img标签属性</h3><p>​    alt:替换文本属性</p>
<p>​    width:宽</p>
<p>​    height:高</p>
<h1 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;							定义表格</span><br><span class="line">&lt;caption&gt;						定义表格标题</span><br><span class="line">&lt;th&gt;							定义表格的表头</span><br><span class="line">&lt;tr&gt;							定义表格的行</span><br><span class="line">&lt;td&gt;							定义表格的单元</span><br><span class="line">&lt;thead&gt;							定义表格的页眉</span><br><span class="line">&lt;tbody&gt;							定义表格的主体</span><br><span class="line">&lt;tfoot&gt;							定义表格的页脚</span><br><span class="line">&lt;col&gt;							定义表格的列属性</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML元素</title>
    <url>/2020/01/17/HTML%E5%AD%A6%E4%B9%A0/HTML%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="1、HTML元素"><a href="#1、HTML元素" class="headerlink" title="1、HTML元素"></a>1、HTML元素</h2><h3 id="1、元素指的是开始标签到结束标签的所有代码"><a href="#1、元素指的是开始标签到结束标签的所有代码" class="headerlink" title="1、元素指的是开始标签到结束标签的所有代码"></a>1、元素指的是开始标签到结束标签的所有代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">开始标签				元素内容					结束标签</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>					   this is my web page 		  <span class="tag">&lt;/<span class="name">p</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span>	//空元素</span><br></pre></td></tr></table></figure>

<h3 id="2、元素语法"><a href="#2、元素语法" class="headerlink" title="2、元素语法"></a>2、元素语法</h3><p>元素的内容是开始标签与结束标签之间的内容</p>
<p>空元素在开始标签中进行关闭</p>
<p>大多数HTML元素可拥有属性</p>
<h3 id="3、嵌套的HTML元素"><a href="#3、嵌套的HTML元素" class="headerlink" title="3、嵌套的HTML元素"></a>3、嵌套的HTML元素</h3><h2 id="2、HTML元素属性和格式化"><a href="#2、HTML元素属性和格式化" class="headerlink" title="2、HTML元素属性和格式化"></a>2、HTML元素属性和格式化</h2><h3 id="1、属性"><a href="#1、属性" class="headerlink" title="1、属性"></a>1、属性</h3><p>1、标签可以拥有属性为元素提供更多的信息</p>
<p>2、属性以键/值对的形式出现</p>
<p><code>href = &quot;https://yuanzhiqj.github.com&quot;</code></p>
<p>3、常用标签属性</p>
<p><code>&lt;h1&gt;:align对其方式</code></p>
<p><code>&lt;body&gt;:bgcolor背景颜色</code></p>
<p><code>&lt;a&gt;:target规定在何处打开链接 _self在当前目录页覆盖 _blank新建标签页打开</code></p>
<p>4、通用元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class:规定元素的类名</span><br><span class="line">id:规定元素唯一ID</span><br><span class="line">style:规定元素的样式</span><br><span class="line">title:规定元素的额外信息</span><br></pre></td></tr></table></figure>

<h3 id="2、-格式化"><a href="#2、-格式化" class="headerlink" title="2、 格式化"></a>2、 格式化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;					定义粗体文本</span><br><span class="line">&lt;big&gt;				定义大号字</span><br><span class="line">&lt;em&gt;				定义着重文字</span><br><span class="line">&lt;i&gt;					定义斜体字</span><br><span class="line">&lt;small&gt;				定义小体字</span><br><span class="line">&lt;sub&gt;				定义下标字</span><br><span class="line">&lt;sup&gt;				定义上标字</span><br><span class="line">&lt;ins&gt;				定义插入字</span><br><span class="line">&lt;del&gt;				定义删除字</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode/113.杨辉三角</title>
    <url>/2020/01/17/leetcode/113.%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><code>给定一个非负数numRows,生成杨辉三角前numRows行</code></p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>利用动态规划找规律，每一行的首尾均为1。而a[i] [j]  =a[i-1] [j-1] + a[i-1] [j];</p>
<p>利用两次for循环即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i+<span class="number">1</span>; j++)	<span class="comment">//每一行的数字</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>)					<span class="comment">//行首</span></span><br><span class="line">                    temp.push_back(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == i)				<span class="comment">//行尾</span></span><br><span class="line">                    temp.push_back(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp.push_back(res[i<span class="number">-1</span>][j<span class="number">-1</span>]+res[i<span class="number">-1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML基础讲解</title>
    <url>/2020/01/16/HTML%E5%AD%A6%E4%B9%A0/HTML%E5%9F%BA%E7%A1%80%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="1、HTML基础标签"><a href="#1、HTML基础标签" class="headerlink" title="1、HTML基础标签"></a>1、HTML基础标签</h2><p><code>&lt;!DOCTYPE html&gt;</code></p>
<p>是HTML5的标识头，html的不同版本具有不同的标识头</p>
<p><code>&lt;html lang=&quot;en&quot;&gt;</code></p>
<p>语言默认为英文</p>
<p><code>&lt;head&gt;</code> <code>&lt;body&gt;</code></p>
<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>   指定编码格式</p>
<p><code>&lt;title&gt;</code>  指定标题</p>
<h2 id="2、HTML标题"><a href="#2、HTML标题" class="headerlink" title="2、HTML标题"></a>2、HTML标题</h2><p><code>&lt;h1&gt; ...&lt;h6&gt;</code> </p>
<p>标题由大到小</p>
<h2 id="3、HTML段落"><a href="#3、HTML段落" class="headerlink" title="3、HTML段落"></a>3、HTML段落</h2><p><code>&lt;p&gt;...&lt;/p&gt;</code></p>
<p>在这之后的语句会另起一行</p>
<h2 id="4、HTML超链接"><a href="#4、HTML超链接" class="headerlink" title="4、HTML超链接"></a>4、HTML超链接</h2><p><code>&lt;a href=&quot;链接地址&quot;&gt;链接名字&lt;/a&gt;</code></p>
<h2 id="5、HTML图片链接"><a href="#5、HTML图片链接" class="headerlink" title="5、HTML图片链接"></a>5、HTML图片链接</h2><p><code>&lt;img src=&quot;图片地址&quot;&gt;</code></p>
]]></content>
  </entry>
  <entry>
    <title>最大子序和</title>
    <url>/2020/01/10/leetcode/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    <content><![CDATA[<p>##最大子序和##</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode/17.电话号码的字母组合</title>
    <url>/2019/11/21/leetcode/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h1 id="17-电话号码的字母组合（广度优先法）"><a href="#17-电话号码的字母组合（广度优先法）" class="headerlink" title="17.电话号码的字母组合（广度优先法）"></a>17.电话号码的字母组合（广度优先法）</h1><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>淦……最近英文版leetcode不知道为啥好像崩了。（顺便给自己偷几天懒有了正当理由，不过感觉中文版的好多了</p>
<p><strong>题目描述</strong></p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png" alt="jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</span><br><span class="line"></span><br><span class="line">给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入：&quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>



<p><strong>准备工作</strong></p>
<p>为了简单的找到数字对应的字母，采用哈希表储存：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; m&#123;&#123;<span class="string">'2'</span>, <span class="string">"abc"</span>&#125;,&#123;<span class="string">'3'</span>,<span class="string">"def"</span>&#125;,&#123;<span class="string">'4'</span>,<span class="string">"ghi"</span>&#125;,&#123;<span class="string">'5'</span>,<span class="string">"jkl"</span>&#125;,&#123;<span class="string">'6'</span>,<span class="string">"mno"</span>&#125;,&#123;<span class="string">'7'</span>,<span class="string">"pqrs"</span>&#125;,&#123;<span class="string">'8'</span>,<span class="string">"tuv"</span>&#125;,&#123;<span class="string">'9'</span>,<span class="string">"wxyz"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>算法说明</strong></p>
<p>由于采用的是广度优先搜索的思想，所以本题我们借助队列来实现算法。</p>
<p>由于队列为“先进先出”的容器，将首个数字对应的全部字符放进队列后进行循环遍历。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//先存储第一个对应的字符</span><br><span class="line">        for(int i = 0; i &lt; m[digits[0]].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string str;</span><br><span class="line">			str.push_back(m[digits[0]][i]);</span><br><span class="line">            q.push(str);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>在循环中，每次将队列头与下个数字对应的全部字符依次连接后，进入队列。队列头与每个字符依次连接和出队列。注意由于将新的字符串压入队列，所以在循环之前需要获得队列的长度，在队列长度减少的情况下进行循环。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int length = q.size();</span><br><span class="line">     while(length--)</span><br><span class="line">      &#123;</span><br><span class="line">          for(int j = 0; j &lt; m[digits[i]].size(); j++)</span><br><span class="line">          &#123;</span><br><span class="line">              s = q.front();</span><br><span class="line">              s = s + m[digits[i]][j];</span><br><span class="line">              q.push(s);</span><br><span class="line">          &#125;</span><br><span class="line">          q.pop();    //弹出队头</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<p><strong>全部代码如下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;string&gt; letterCombinations(string digits) &#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        map&lt;char, string&gt; m&#123;&#123;&apos;2&apos;, &quot;abc&quot;&#125;,&#123;&apos;3&apos;,&quot;def&quot;&#125;,&#123;&apos;4&apos;,&quot;ghi&quot;&#125;,&#123;&apos;5&apos;,&quot;jkl&quot;&#125;,&#123;&apos;6&apos;,&quot;mno&quot;&#125;,&#123;&apos;7&apos;,&quot;pqrs&quot;&#125;,&#123;&apos;8&apos;,&quot;tuv&quot;&#125;,&#123;&apos;9&apos;,&quot;wxyz&quot;&#125;&#125;; //建立哈希表</span><br><span class="line">        queue&lt;string&gt; q;    //建立队列</span><br><span class="line"></span><br><span class="line">        //先存储第一个对应的字符</span><br><span class="line">        for(int i = 0; i &lt; m[digits[0]].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string str;</span><br><span class="line">			str.push_back(m[digits[0]][i]);</span><br><span class="line">            q.push(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string s;   //建立临时字符串</span><br><span class="line">        //开始遍历</span><br><span class="line">        for(int i = 1; i &lt; digits.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int length = q.size();</span><br><span class="line">            while(length--)</span><br><span class="line">            &#123;</span><br><span class="line">                for(int j = 0; j &lt; m[digits[i]].size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    s = q.front();</span><br><span class="line">                    s = s + m[digits[i]][j];</span><br><span class="line">                    q.push(s);</span><br><span class="line">                &#125;</span><br><span class="line">                q.pop();    //弹出队头</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(q.front());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>后记</strong></p>
<p>其实原来想着用最暴力最简单的方法来做的，但是实在是太麻烦了。借鉴了解题区【苏格】大佬的思路。十分感谢。</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode/832. Flipping an Image</title>
    <url>/2019/11/07/leetcode/832.%20Flipping%20an%20Image/</url>
    <content><![CDATA[<h1 id="832-Flipping-an-Image"><a href="#832-Flipping-an-Image" class="headerlink" title="832.Flipping an Image"></a>832.Flipping an Image</h1><h2 id="二元数组问题"><a href="#二元数组问题" class="headerlink" title="二元数组问题"></a>二元数组问题</h2><p>问题描述：给定一个0-1矩阵，依次将矩阵的每一行进行水平翻转后，再将每个元素反转。</p>
<p>个人认为的难点是对于vector二维的遍历。在本题中我采用了用迭代器的方法，但是感觉略显笨拙，代码如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; flipAndInvertImage(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) &#123;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator it1;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it2;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(it1 = A.begin(); it1 != A.end(); it1++)</span><br><span class="line">       &#123;</span><br><span class="line">           j = <span class="number">0</span>;</span><br><span class="line">           a = *it1;</span><br><span class="line">           reverse(a.begin(), a.end());</span><br><span class="line">           <span class="keyword">for</span>(it2 = a.begin(); it2 != a.end(); it2++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(*it2 == <span class="number">1</span>)</span><br><span class="line">                   A[i][j] = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   A[i][j] = <span class="number">1</span>;</span><br><span class="line">               j++;</span><br><span class="line">           &#125;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>但在讨论区中有一个非常简洁的代码，用的是C++11的标准。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; flipAndInvertImage(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// iterate over each row</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; row : A)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// first reverse the order of the row </span></span><br><span class="line">            <span class="comment">// (this can be done after the bit flip as well)</span></span><br><span class="line">            reverse(row.begin(), row.end());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// xor each element of the row to flip the bits</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>&amp; val : row)</span><br><span class="line">            &#123;</span><br><span class="line">                val ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// return original ref</span></span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><font color = red> 遍历vector容器的三种方法</font></p>
<p>1、下标法    </p>
<p><code>for(int i = 0; i &lt; A.size(); i++)</code></p>
<p>2、迭代器方法</p>
<p><code>for(vector&lt;Elemtype&gt;::iterator iter = A.begin();iter !=A.end();iter++)</code></p>
<p>3、C++11标准</p>
<p><code>for(auto i : A)</code></p>
]]></content>
  </entry>
  <entry>
    <title>leetcode/2. Add Two Numbers</title>
    <url>/2019/11/04/leetcode/2.%20Add%20Two%20Numbers/</url>
    <content><![CDATA[<h1 id="leetcode-2"><a href="#leetcode-2" class="headerlink" title="leetcode #2"></a>leetcode #2</h1><h2 id="链表问题"><a href="#链表问题" class="headerlink" title="链表问题"></a>链表问题</h2><p>遍历链表，直到两个链表均为空。</p>
<p>但是若最后是需要进位的数，则还需添加判断条件，即sum是否为0。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* result = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* prePtr;</span><br><span class="line">        ListNode* curPtr;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//add</span></span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += l1-&gt;val;</span><br><span class="line">                 l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += l2-&gt;val;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//insert</span></span><br><span class="line">            curPtr = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(result == <span class="literal">NULL</span>)</span><br><span class="line">                result = curPtr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prePtr-&gt;next = curPtr;</span><br><span class="line">            sum = sum / <span class="number">10</span>;</span><br><span class="line">            prePtr = curPtr;</span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            curPtr = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">            prePtr-&gt;next = curPtr;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>lab/gdb</title>
    <url>/2019/11/01/lab/gdb/</url>
    <content><![CDATA[<h1 id="计算机系统基础LAB1"><a href="#计算机系统基础LAB1" class="headerlink" title="计算机系统基础LAB1"></a>计算机系统基础LAB1</h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>1、 熟悉linux操作的基本操作；</p>
<p>2、 掌握gcc编译方法；</p>
<p>3、 掌握gdb的调试工具使用；</p>
<p>4、 掌握objdump反汇编工具使用；</p>
<p>5、 熟悉理解反汇编程序（对照源程序与objdump生成的汇编程序）。</p>
<h2 id="二、-实验环境"><a href="#二、-实验环境" class="headerlink" title="二、 实验环境"></a>二、 实验环境</h2><p>列举你所使用的软件工具</p>
<p>1、 使用powershell远程连接至bupt1服务端</p>
<p>三、实验内容</p>
<p>现有int型数组a[i]=i-50,b[i]=i+y，其中y取自于学生本人学号2018211x*y的个位。登录bupt1服务器，在linux环境下使用vi编辑器编写C语言源程序，完成数组a+b的功能，规定数组长度为100，函数名为madd（），数组a，b均定义在函数内，采用gcc编译该程序（不使用优化选项），</p>
<p>1、 使用objdump工具生成汇编程序，找到madd函数的汇编程序，给出截图；</p>
<p>2、 用gdb进行调试，练习如下gdb命令，给出截图；</p>
<p>gdb、file、kill、quit、break、delete、clear、info break、run、continue、nexti、stepi、disassemble、list、print、x、info reg、watch</p>
<p>3、 找到a[i]+b[i]对应的汇编指令，指出a[i]和b[i]位于哪个寄存器中，给出截图；</p>
<p>4、 使用单步指令及gdb相关命令，显示a[xy]+b[xy]对应的汇编指令执行前后操作数寄存器十进制和十六进制的值，其中x，y取自于学生本人学号2018211x*y的百位和个位。</p>
<p>学号2018211999，a[99]+b[99]单步执行前后的参考截图如下（实际命令未显示出）：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps1.jpg" alt="img"> </p>
<h2 id="三、-实验步骤及实验分析"><a href="#三、-实验步骤及实验分析" class="headerlink" title="三、 实验步骤及实验分析"></a>三、 实验步骤及实验分析</h2><p>1、使用vim lab1.c指令编写源程序。</p>
<p>​    <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps2.jpg" alt="img"></p>
<p>键入i进入编辑模式，编辑完毕后按esc进入末行模式后键入:x后保存退出。</p>
<p>   用cat lab1.c指令打开后如下所示</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps3.jpg" alt="img"> </p>
<p>2、使用gcc -g lab1.c -o lab1指令生成可执行程序并附加调试信息。</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps4.jpg" alt="img"> </p>
<p>用./lab1打开可执行程序后运行结果如下：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps5.jpg" alt="img"> </p>
<p>3、使用objdump -d lab1指令生成汇编程序。madd函数的汇编程序如下：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps6.jpg" alt="img"> </p>
<p>4、练习gdb调试指令</p>
<p>·file</p>
<pre><code>打开要调试的可执行文件</code></pre><p>​     <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps7.jpg" alt="img"></p>
<p>·kill</p>
<pre><code>终止正在运行的程序

![img](file:///C:\Users\dell\AppData\Local\Temp\ksohtml11304\wps8.jpg)    </code></pre><p>·quit</p>
<pre><code>退出调试</code></pre><p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps9.jpg" alt="img"> </p>
<p>·break</p>
<p>设置断点处的位置</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps10.jpg" alt="img"> </p>
<p>·delete</p>
<p>删除断点，选项为断点的编号</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps11.jpg" alt="img"> </p>
<p>·clear</p>
<p>删除断点，选项为设置了断点的行号</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps12.jpg" alt="img"> </p>
<p>·info break</p>
<p>查看断点处的情况</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps13.jpg" alt="img"> </p>
<p>·run</p>
<p>运行程序</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps14.jpg" alt="img"> </p>
<p>·continue</p>
<p>从断点处继续运行，直到下一断点处或程序结束</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps15.jpg" alt="img"> </p>
<p>·nexti</p>
<p>直接执行下一步语句</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps16.jpg" alt="img"> </p>
<p>·stepi</p>
<p>执行下一步语句，如果遇到函数则进入函数内</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps17.jpg" alt="img"> </p>
<p>·list</p>
<p>显示源程序，一次显示10行</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps18.jpg" alt="img"> </p>
<p>·print</p>
<p>打印出变量、寄存器储存的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps19.jpg" alt="img"> </p>
<p>·x</p>
<p>打印出内存存储的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps20.jpg" alt="img"> </p>
<p>·info reg</p>
<p>显示出所有寄存器的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps21.jpg" alt="img"> </p>
<p>·watch</p>
<p>跟踪变量，如发生变化则显示改变前及改变后的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps22.jpg" alt="img"> </p>
<p>5、找到a[i]+b[i]的汇编指令：</p>
<p>  <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps23.jpg" alt="img"></p>
<p>​    a[i]所在的位置为“-816（%rbp,%rax,4）”</p>
<p>b[i]所在的位置为“-416（%rbp,%rax,4)”</p>
<p>i所在的位置为-824（%rbp)</p>
<p>temp所在位置为-820（%rbp)</p>
<p>存放a[i]+b[i]的值的寄存器为%eax</p>
<p>该汇编指令先将a[i]的值移动到%edx中，再将b[i]的值移动到%eax中，通过addl将其相加，再存放至变量temp中。</p>
<p>单步执行指令：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps24.jpg" alt="img"> </p>
<p>使用print $eax 打印寄存器寄存的信息。得到原来%eax中的值为46，只后变为b[46]的值52，将a[46]的值加入后得到48，十六进制为0x30。</p>
]]></content>
  </entry>
  <entry>
    <title>mytest</title>
    <url>/2019/10/28/mytest/</url>
    <content><![CDATA[<p><strong>在whl带佬的指导下，爷终于搞定了</strong></p>
<p><img src="http://i2.tiimg.com/703093/1e80a95fd47ce6ec.jpg" alt="jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
  </entry>
</search>
