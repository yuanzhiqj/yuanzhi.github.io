<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML学习/HTML样式</title>
    <url>/2020/01/17/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="HTML样式"><a href="#HTML样式" class="headerlink" title="HTML样式"></a>HTML样式</h1><h3 id="1、标签"><a href="#1、标签" class="headerlink" title="1、标签"></a>1、标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;:样式定义</span><br><span class="line">&lt;link&gt;:资源引用</span><br></pre></td></tr></table></figure>

<h3 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rel = &quot;stylesheet&quot;:外部样式表</span><br><span class="line">type = &quot;text/css&quot;:引入文档的类型</span><br><span class="line">margin-left:边距</span><br></pre></td></tr></table></figure>

<h3 id="3、三种样式表插入方法"><a href="#3、三种样式表插入方法" class="headerlink" title="3、三种样式表插入方法"></a>3、三种样式表插入方法</h3><p>外部样式表</p>
<p><code>&lt;link rel = &quot;stylesheet&quot;type=&quot;text/css&quot; href = &quot;mystyle.css&quot;&gt;</code></p>
<p>内部样式表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style type = &quot;text/css&quot;&gt;</span><br><span class="line">body&#123;background-color:red&#125;</span><br><span class="line">p&#123;margin-left:20px&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>内联样式表</p>
<p><code>&lt;p style = &quot;color:red&quot;&gt;</code></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML元素</title>
    <url>/2020/01/17/HTML%E5%AD%A6%E4%B9%A0/HTML%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="1、HTML元素"><a href="#1、HTML元素" class="headerlink" title="1、HTML元素"></a>1、HTML元素</h2><h3 id="1、元素指的是开始标签到结束标签的所有代码"><a href="#1、元素指的是开始标签到结束标签的所有代码" class="headerlink" title="1、元素指的是开始标签到结束标签的所有代码"></a>1、元素指的是开始标签到结束标签的所有代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">开始标签				元素内容					结束标签</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>					   this is my web page 		  <span class="tag">&lt;/<span class="name">p</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span>	//空元素</span><br></pre></td></tr></table></figure>

<h3 id="2、元素语法"><a href="#2、元素语法" class="headerlink" title="2、元素语法"></a>2、元素语法</h3><p>元素的内容是开始标签与结束标签之间的内容</p>
<p>空元素在开始标签中进行关闭</p>
<p>大多数HTML元素可拥有属性</p>
<h3 id="3、嵌套的HTML元素"><a href="#3、嵌套的HTML元素" class="headerlink" title="3、嵌套的HTML元素"></a>3、嵌套的HTML元素</h3><h2 id="2、HTML元素属性和格式化"><a href="#2、HTML元素属性和格式化" class="headerlink" title="2、HTML元素属性和格式化"></a>2、HTML元素属性和格式化</h2><h3 id="1、属性"><a href="#1、属性" class="headerlink" title="1、属性"></a>1、属性</h3><p>1、标签可以拥有属性为元素提供更多的信息</p>
<p>2、属性以键/值对的形式出现</p>
<p><code>href = &quot;https://yuanzhiqj.github.com&quot;</code></p>
<p>3、常用标签属性</p>
<p><code>&lt;h1&gt;:align对其方式</code></p>
<p><code>&lt;body&gt;:bgcolor背景颜色</code></p>
<p><code>&lt;a&gt;:target规定在何处打开链接 _self在当前目录页覆盖 _blank新建标签页打开</code></p>
<p>4、通用元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class:规定元素的类名</span><br><span class="line">id:规定元素唯一ID</span><br><span class="line">style:规定元素的样式</span><br><span class="line">title:规定元素的额外信息</span><br></pre></td></tr></table></figure>

<h3 id="2、-格式化"><a href="#2、-格式化" class="headerlink" title="2、 格式化"></a>2、 格式化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;					定义粗体文本</span><br><span class="line">&lt;big&gt;				定义大号字</span><br><span class="line">&lt;em&gt;				定义着重文字</span><br><span class="line">&lt;i&gt;					定义斜体字</span><br><span class="line">&lt;small&gt;				定义小体字</span><br><span class="line">&lt;sub&gt;				定义下标字</span><br><span class="line">&lt;sup&gt;				定义上标字</span><br><span class="line">&lt;ins&gt;				定义插入字</span><br><span class="line">&lt;del&gt;				定义删除字</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>leetcode/113.杨辉三角</title>
    <url>/2020/01/17/leetcode/113.%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><code>给定一个非负数numRows,生成杨辉三角前numRows行</code></p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>利用动态规划找规律，每一行的首尾均为1。而a[i] [j]  =a[i-1] [j-1] + a[i-1] [j];</p>
<p>利用两次for循环即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i+<span class="number">1</span>; j++)	<span class="comment">//每一行的数字</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>)					<span class="comment">//行首</span></span><br><span class="line">                    temp.push_back(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == i)				<span class="comment">//行尾</span></span><br><span class="line">                    temp.push_back(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp.push_back(res[i<span class="number">-1</span>][j<span class="number">-1</span>]+res[i<span class="number">-1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML基础讲解</title>
    <url>/2020/01/16/HTML%E5%AD%A6%E4%B9%A0/HTML%E5%9F%BA%E7%A1%80%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="1、HTML基础标签"><a href="#1、HTML基础标签" class="headerlink" title="1、HTML基础标签"></a>1、HTML基础标签</h2><p><code>&lt;!DOCTYPE html&gt;</code></p>
<p>是HTML5的标识头，html的不同版本具有不同的标识头</p>
<p><code>&lt;html lang=&quot;en&quot;&gt;</code></p>
<p>语言默认为英文</p>
<p><code>&lt;head&gt;</code> <code>&lt;body&gt;</code></p>
<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>   指定编码格式</p>
<p><code>&lt;title&gt;</code>  指定标题</p>
<h2 id="2、HTML标题"><a href="#2、HTML标题" class="headerlink" title="2、HTML标题"></a>2、HTML标题</h2><p><code>&lt;h1&gt; ...&lt;h6&gt;</code> </p>
<p>标题由大到小</p>
<h2 id="3、HTML段落"><a href="#3、HTML段落" class="headerlink" title="3、HTML段落"></a>3、HTML段落</h2><p><code>&lt;p&gt;...&lt;/p&gt;</code></p>
<p>在这之后的语句会另起一行</p>
<h2 id="4、HTML超链接"><a href="#4、HTML超链接" class="headerlink" title="4、HTML超链接"></a>4、HTML超链接</h2><p><code>&lt;a href=&quot;链接地址&quot;&gt;链接名字&lt;/a&gt;</code></p>
<h2 id="5、HTML图片链接"><a href="#5、HTML图片链接" class="headerlink" title="5、HTML图片链接"></a>5、HTML图片链接</h2><p><code>&lt;img src=&quot;图片地址&quot;&gt;</code></p>
]]></content>
  </entry>
  <entry>
    <title>最大子序和</title>
    <url>/2020/01/10/leetcode/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    <content><![CDATA[<p>##最大子序和##</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode/17.电话号码的字母组合</title>
    <url>/2019/11/21/leetcode/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h1 id="17-电话号码的字母组合（广度优先法）"><a href="#17-电话号码的字母组合（广度优先法）" class="headerlink" title="17.电话号码的字母组合（广度优先法）"></a>17.电话号码的字母组合（广度优先法）</h1><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>淦……最近英文版leetcode不知道为啥好像崩了。（顺便给自己偷几天懒有了正当理由，不过感觉中文版的好多了</p>
<p><strong>题目描述</strong></p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png" alt="jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</span><br><span class="line"></span><br><span class="line">给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入：&quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>



<p><strong>准备工作</strong></p>
<p>为了简单的找到数字对应的字母，采用哈希表储存：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; m&#123;&#123;<span class="string">'2'</span>, <span class="string">"abc"</span>&#125;,&#123;<span class="string">'3'</span>,<span class="string">"def"</span>&#125;,&#123;<span class="string">'4'</span>,<span class="string">"ghi"</span>&#125;,&#123;<span class="string">'5'</span>,<span class="string">"jkl"</span>&#125;,&#123;<span class="string">'6'</span>,<span class="string">"mno"</span>&#125;,&#123;<span class="string">'7'</span>,<span class="string">"pqrs"</span>&#125;,&#123;<span class="string">'8'</span>,<span class="string">"tuv"</span>&#125;,&#123;<span class="string">'9'</span>,<span class="string">"wxyz"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>算法说明</strong></p>
<p>由于采用的是广度优先搜索的思想，所以本题我们借助队列来实现算法。</p>
<p>由于队列为“先进先出”的容器，将首个数字对应的全部字符放进队列后进行循环遍历。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//先存储第一个对应的字符</span><br><span class="line">        for(int i = 0; i &lt; m[digits[0]].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string str;</span><br><span class="line">			str.push_back(m[digits[0]][i]);</span><br><span class="line">            q.push(str);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>在循环中，每次将队列头与下个数字对应的全部字符依次连接后，进入队列。队列头与每个字符依次连接和出队列。注意由于将新的字符串压入队列，所以在循环之前需要获得队列的长度，在队列长度减少的情况下进行循环。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int length = q.size();</span><br><span class="line">     while(length--)</span><br><span class="line">      &#123;</span><br><span class="line">          for(int j = 0; j &lt; m[digits[i]].size(); j++)</span><br><span class="line">          &#123;</span><br><span class="line">              s = q.front();</span><br><span class="line">              s = s + m[digits[i]][j];</span><br><span class="line">              q.push(s);</span><br><span class="line">          &#125;</span><br><span class="line">          q.pop();    //弹出队头</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<p><strong>全部代码如下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;string&gt; letterCombinations(string digits) &#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        map&lt;char, string&gt; m&#123;&#123;&apos;2&apos;, &quot;abc&quot;&#125;,&#123;&apos;3&apos;,&quot;def&quot;&#125;,&#123;&apos;4&apos;,&quot;ghi&quot;&#125;,&#123;&apos;5&apos;,&quot;jkl&quot;&#125;,&#123;&apos;6&apos;,&quot;mno&quot;&#125;,&#123;&apos;7&apos;,&quot;pqrs&quot;&#125;,&#123;&apos;8&apos;,&quot;tuv&quot;&#125;,&#123;&apos;9&apos;,&quot;wxyz&quot;&#125;&#125;; //建立哈希表</span><br><span class="line">        queue&lt;string&gt; q;    //建立队列</span><br><span class="line"></span><br><span class="line">        //先存储第一个对应的字符</span><br><span class="line">        for(int i = 0; i &lt; m[digits[0]].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string str;</span><br><span class="line">			str.push_back(m[digits[0]][i]);</span><br><span class="line">            q.push(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string s;   //建立临时字符串</span><br><span class="line">        //开始遍历</span><br><span class="line">        for(int i = 1; i &lt; digits.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int length = q.size();</span><br><span class="line">            while(length--)</span><br><span class="line">            &#123;</span><br><span class="line">                for(int j = 0; j &lt; m[digits[i]].size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    s = q.front();</span><br><span class="line">                    s = s + m[digits[i]][j];</span><br><span class="line">                    q.push(s);</span><br><span class="line">                &#125;</span><br><span class="line">                q.pop();    //弹出队头</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(q.front());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>后记</strong></p>
<p>其实原来想着用最暴力最简单的方法来做的，但是实在是太麻烦了。借鉴了解题区【苏格】大佬的思路。十分感谢。</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode/832. Flipping an Image</title>
    <url>/2019/11/07/leetcode/832.%20Flipping%20an%20Image/</url>
    <content><![CDATA[<h1 id="832-Flipping-an-Image"><a href="#832-Flipping-an-Image" class="headerlink" title="832.Flipping an Image"></a>832.Flipping an Image</h1><h2 id="二元数组问题"><a href="#二元数组问题" class="headerlink" title="二元数组问题"></a>二元数组问题</h2><p>问题描述：给定一个0-1矩阵，依次将矩阵的每一行进行水平翻转后，再将每个元素反转。</p>
<p>个人认为的难点是对于vector二维的遍历。在本题中我采用了用迭代器的方法，但是感觉略显笨拙，代码如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; flipAndInvertImage(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) &#123;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator it1;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it2;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(it1 = A.begin(); it1 != A.end(); it1++)</span><br><span class="line">       &#123;</span><br><span class="line">           j = <span class="number">0</span>;</span><br><span class="line">           a = *it1;</span><br><span class="line">           reverse(a.begin(), a.end());</span><br><span class="line">           <span class="keyword">for</span>(it2 = a.begin(); it2 != a.end(); it2++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(*it2 == <span class="number">1</span>)</span><br><span class="line">                   A[i][j] = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   A[i][j] = <span class="number">1</span>;</span><br><span class="line">               j++;</span><br><span class="line">           &#125;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>但在讨论区中有一个非常简洁的代码，用的是C++11的标准。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; flipAndInvertImage(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// iterate over each row</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; row : A)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// first reverse the order of the row </span></span><br><span class="line">            <span class="comment">// (this can be done after the bit flip as well)</span></span><br><span class="line">            reverse(row.begin(), row.end());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// xor each element of the row to flip the bits</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>&amp; val : row)</span><br><span class="line">            &#123;</span><br><span class="line">                val ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// return original ref</span></span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><font color = red> 遍历vector容器的三种方法</font></p>
<p>1、下标法    </p>
<p><code>for(int i = 0; i &lt; A.size(); i++)</code></p>
<p>2、迭代器方法</p>
<p><code>for(vector&lt;Elemtype&gt;::iterator iter = A.begin();iter !=A.end();iter++)</code></p>
<p>3、C++11标准</p>
<p><code>for(auto i : A)</code></p>
]]></content>
  </entry>
  <entry>
    <title>leetcode/2. Add Two Numbers</title>
    <url>/2019/11/04/leetcode/2.%20Add%20Two%20Numbers/</url>
    <content><![CDATA[<h1 id="leetcode-2"><a href="#leetcode-2" class="headerlink" title="leetcode #2"></a>leetcode #2</h1><h2 id="链表问题"><a href="#链表问题" class="headerlink" title="链表问题"></a>链表问题</h2><p>遍历链表，直到两个链表均为空。</p>
<p>但是若最后是需要进位的数，则还需添加判断条件，即sum是否为0。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* result = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* prePtr;</span><br><span class="line">        ListNode* curPtr;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//add</span></span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += l1-&gt;val;</span><br><span class="line">                 l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += l2-&gt;val;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//insert</span></span><br><span class="line">            curPtr = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(result == <span class="literal">NULL</span>)</span><br><span class="line">                result = curPtr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prePtr-&gt;next = curPtr;</span><br><span class="line">            sum = sum / <span class="number">10</span>;</span><br><span class="line">            prePtr = curPtr;</span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            curPtr = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">            prePtr-&gt;next = curPtr;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>lab/gdb</title>
    <url>/2019/11/01/lab/gdb/</url>
    <content><![CDATA[<h1 id="计算机系统基础LAB1"><a href="#计算机系统基础LAB1" class="headerlink" title="计算机系统基础LAB1"></a>计算机系统基础LAB1</h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>1、 熟悉linux操作的基本操作；</p>
<p>2、 掌握gcc编译方法；</p>
<p>3、 掌握gdb的调试工具使用；</p>
<p>4、 掌握objdump反汇编工具使用；</p>
<p>5、 熟悉理解反汇编程序（对照源程序与objdump生成的汇编程序）。</p>
<h2 id="二、-实验环境"><a href="#二、-实验环境" class="headerlink" title="二、 实验环境"></a>二、 实验环境</h2><p>列举你所使用的软件工具</p>
<p>1、 使用powershell远程连接至bupt1服务端</p>
<p>三、实验内容</p>
<p>现有int型数组a[i]=i-50,b[i]=i+y，其中y取自于学生本人学号2018211x*y的个位。登录bupt1服务器，在linux环境下使用vi编辑器编写C语言源程序，完成数组a+b的功能，规定数组长度为100，函数名为madd（），数组a，b均定义在函数内，采用gcc编译该程序（不使用优化选项），</p>
<p>1、 使用objdump工具生成汇编程序，找到madd函数的汇编程序，给出截图；</p>
<p>2、 用gdb进行调试，练习如下gdb命令，给出截图；</p>
<p>gdb、file、kill、quit、break、delete、clear、info break、run、continue、nexti、stepi、disassemble、list、print、x、info reg、watch</p>
<p>3、 找到a[i]+b[i]对应的汇编指令，指出a[i]和b[i]位于哪个寄存器中，给出截图；</p>
<p>4、 使用单步指令及gdb相关命令，显示a[xy]+b[xy]对应的汇编指令执行前后操作数寄存器十进制和十六进制的值，其中x，y取自于学生本人学号2018211x*y的百位和个位。</p>
<p>学号2018211999，a[99]+b[99]单步执行前后的参考截图如下（实际命令未显示出）：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps1.jpg" alt="img"> </p>
<h2 id="三、-实验步骤及实验分析"><a href="#三、-实验步骤及实验分析" class="headerlink" title="三、 实验步骤及实验分析"></a>三、 实验步骤及实验分析</h2><p>1、使用vim lab1.c指令编写源程序。</p>
<p>​    <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps2.jpg" alt="img"></p>
<p>键入i进入编辑模式，编辑完毕后按esc进入末行模式后键入:x后保存退出。</p>
<p>   用cat lab1.c指令打开后如下所示</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps3.jpg" alt="img"> </p>
<p>2、使用gcc -g lab1.c -o lab1指令生成可执行程序并附加调试信息。</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps4.jpg" alt="img"> </p>
<p>用./lab1打开可执行程序后运行结果如下：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps5.jpg" alt="img"> </p>
<p>3、使用objdump -d lab1指令生成汇编程序。madd函数的汇编程序如下：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps6.jpg" alt="img"> </p>
<p>4、练习gdb调试指令</p>
<p>·file</p>
<pre><code>打开要调试的可执行文件</code></pre><p>​     <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps7.jpg" alt="img"></p>
<p>·kill</p>
<pre><code>终止正在运行的程序

![img](file:///C:\Users\dell\AppData\Local\Temp\ksohtml11304\wps8.jpg)    </code></pre><p>·quit</p>
<pre><code>退出调试</code></pre><p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps9.jpg" alt="img"> </p>
<p>·break</p>
<p>设置断点处的位置</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps10.jpg" alt="img"> </p>
<p>·delete</p>
<p>删除断点，选项为断点的编号</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps11.jpg" alt="img"> </p>
<p>·clear</p>
<p>删除断点，选项为设置了断点的行号</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps12.jpg" alt="img"> </p>
<p>·info break</p>
<p>查看断点处的情况</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps13.jpg" alt="img"> </p>
<p>·run</p>
<p>运行程序</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps14.jpg" alt="img"> </p>
<p>·continue</p>
<p>从断点处继续运行，直到下一断点处或程序结束</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps15.jpg" alt="img"> </p>
<p>·nexti</p>
<p>直接执行下一步语句</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps16.jpg" alt="img"> </p>
<p>·stepi</p>
<p>执行下一步语句，如果遇到函数则进入函数内</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps17.jpg" alt="img"> </p>
<p>·list</p>
<p>显示源程序，一次显示10行</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps18.jpg" alt="img"> </p>
<p>·print</p>
<p>打印出变量、寄存器储存的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps19.jpg" alt="img"> </p>
<p>·x</p>
<p>打印出内存存储的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps20.jpg" alt="img"> </p>
<p>·info reg</p>
<p>显示出所有寄存器的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps21.jpg" alt="img"> </p>
<p>·watch</p>
<p>跟踪变量，如发生变化则显示改变前及改变后的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps22.jpg" alt="img"> </p>
<p>5、找到a[i]+b[i]的汇编指令：</p>
<p>  <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps23.jpg" alt="img"></p>
<p>​    a[i]所在的位置为“-816（%rbp,%rax,4）”</p>
<p>b[i]所在的位置为“-416（%rbp,%rax,4)”</p>
<p>i所在的位置为-824（%rbp)</p>
<p>temp所在位置为-820（%rbp)</p>
<p>存放a[i]+b[i]的值的寄存器为%eax</p>
<p>该汇编指令先将a[i]的值移动到%edx中，再将b[i]的值移动到%eax中，通过addl将其相加，再存放至变量temp中。</p>
<p>单步执行指令：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps24.jpg" alt="img"> </p>
<p>使用print $eax 打印寄存器寄存的信息。得到原来%eax中的值为46，只后变为b[46]的值52，将a[46]的值加入后得到48，十六进制为0x30。</p>
]]></content>
  </entry>
  <entry>
    <title>mytest</title>
    <url>/2019/10/28/mytest/</url>
    <content><![CDATA[<p><strong>在whl带佬的指导下，爷终于搞定了</strong></p>
<p><img src="http://i2.tiimg.com/703093/1e80a95fd47ce6ec.jpg" alt="jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
  </entry>
</search>
