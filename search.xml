<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS/CSS基础</title>
    <url>/2020/02/04/CSS/CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h1><p>1.selector{</p>
<p>​    property:value</p>
<p>}</p>
<p>例：<code>h1{color:red;font-size:14px}</code></p>
<p>属性大于1个之后，属性之间用分号隔开</p>
<p>如果值大于1个单词，则需要加上引号:</p>
<p><code>p{font-family:&quot;sans serif&quot;;}</code></p>
<h1 id="CSS高级语法"><a href="#CSS高级语法" class="headerlink" title="CSS高级语法"></a>CSS高级语法</h1><h2 id="1、选择器分组："><a href="#1、选择器分组：" class="headerlink" title="1、选择器分组："></a>1、选择器分组：</h2><p>h1,h2,h3,h4,h5,h6{color:red;}</p>
<h2 id="2、继承："><a href="#2、继承：" class="headerlink" title="2、继承："></a>2、继承：</h2><p>body{</p>
<p>​    color:green;</p>
<p>}</p>
<h1 id="派生选择器"><a href="#派生选择器" class="headerlink" title="派生选择器"></a>派生选择器</h1><p>1、通过依据元素在其位置的上下文关系来定义样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">strong</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">strong</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>p标签hello css<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>li标签：Hello css<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时列表项中strong的元素为红色，p标签strong元素为紫色。</p>
<h1 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h1><h2 id="1、id选择器"><a href="#1、id选择器" class="headerlink" title="1、id选择器"></a>1、id选择器</h2><ul>
<li>id选择器可以为标有id的HTML元素指定特定的样式</li>
<li>id选择器以“#”定义</li>
</ul>
<h2 id="2、id选择器和派生选择器"><a href="#2、id选择器和派生选择器" class="headerlink" title="2、id选择器和派生选择器"></a>2、id选择器和派生选择器</h2><p>目前比较常用的方法是id选择器常常用于建立派生选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#divid</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divid"</span>&gt;</span></span><br><span class="line">        这是第一个div<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第二个div<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二条语句变红，第一条语句不变</p>
<h1 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h1><h2 id="1、类选择器"><a href="#1、类选择器" class="headerlink" title="1、类选择器"></a>1、类选择器</h2><p>类选择器以一个点显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.pclass&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、class也可以用作派生选择器"><a href="#2、class也可以用作派生选择器" class="headerlink" title="2、class也可以用作派生选择器"></a>2、class也可以用作派生选择器</h2><h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1><h2 id="1、属性选择器："><a href="#1、属性选择器：" class="headerlink" title="1、属性选择器："></a>1、属性选择器：</h2><p>对带有指定属性的HTML元素设置样式</p>
<h2 id="2、属性和值选择器"><a href="#2、属性和值选择器" class="headerlink" title="2、属性和值选择器"></a>2、属性和值选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-attr">[title]</span>&#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-attr">[title=te]</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"t"</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"te"</span>&gt;</span>属性和值选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一个title为蓝色，第二个title为红色</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>python/pyhton学习笔记1字符串</title>
    <url>/2020/02/04/python/pyhton%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="修改大小写"><a href="#修改大小写" class="headerlink" title="修改大小写"></a>修改大小写</h1><ul>
<li>以首字母大写的方式显示每个单词</li>
</ul>
<p><code>.title()</code></p>
<ul>
<li>全部大写</li>
</ul>
<p><code>.upper()</code></p>
<ul>
<li>全部小写</li>
</ul>
<p><code>.lower()</code></p>
<h1 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h1><ul>
<li>找出字符串开头和末尾多余的空白，但是只是暂时的</li>
</ul>
<p><code>.rstrip()</code></p>
<ul>
<li>剔除开头的空白</li>
</ul>
<p><code>.lstrip()</code></p>
<ul>
<li>剔除两端的空白</li>
</ul>
<p><code>.strip</code></p>
]]></content>
      <categories>
        <category>python入门</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML新增的非主体结构元素</title>
    <url>/2020/02/01/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%96%B0%E5%A2%9E%E7%9A%84%E9%9D%9E%E4%B8%BB%E4%BD%93%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="header元素"><a href="#header元素" class="headerlink" title="header元素"></a>header元素</h1><p>header元素是一种具有引导和导航作用的结构元素，通常用来放置整个页面或页面内的一个内容区块的标题，但是也可以包含其他内容，例如数据表格、搜索表单或相关的logo图片</p>
<h1 id="footer元素"><a href="#footer元素" class="headerlink" title="footer元素"></a>footer元素</h1><p>footer元素可以作为其上层父级内容区块或是一个根区块的脚注。footer通常包括其相关区域的脚注信息，如作者、相关阅读链接及版权信息等。</p>
<h1 id="hgroup元素"><a href="#hgroup元素" class="headerlink" title="hgroup元素"></a>hgroup元素</h1><p>hgroup元素是将标题及其子标题进行分组的标题。hgroup元素通常会将h1~h6元素进行分组，譬如一个内容区块的标题及其子元素算一组。</p>
<h1 id="address元素"><a href="#address元素" class="headerlink" title="address元素"></a>address元素</h1><p>address元素用来在文档中呈现联系信息，包括文档作者或文档维护者的名字、他们的网站链接、电子邮箱、真实地址、电话号码等。address应该不只用来呈现电子邮箱或真实地址，还用来展示跟文档相关的联系人的所有联系信息。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML新增的主体结构元素</title>
    <url>/2020/01/31/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%96%B0%E5%A2%9E%E7%9A%84%E4%B8%BB%E4%BD%93%E7%BB%93%E6%9E%84%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1 id="aside元素"><a href="#aside元素" class="headerlink" title="aside元素"></a>aside元素</h1><p>aside元素用来表示当前页面或文章的附属信息部分，它可以包含与当前页面或主要内容相关的引用、侧边栏、广告、导航条，以及其他类型的有区别于主要内容的部分。</p>
<h1 id="time元素与微格式"><a href="#time元素与微格式" class="headerlink" title="time元素与微格式"></a>time元素与微格式</h1>]]></content>
  </entry>
  <entry>
    <title>机器学习/course5 1.10GRU&LSTM</title>
    <url>/2020/01/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/course5%201.10GRU&amp;LSTM/</url>
    <content><![CDATA[<p>原文链接： <a href="https://www.jianshu.com/p/591fd8b5bbd0" target="_blank" rel="noopener">https://www.jianshu.com/p/591fd8b5bbd0</a> </p>
<img src="https://upload-images.jianshu.io/upload_images/19896587-485eaf5f683112c4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp">



<p>reset gate <img src="https://math.jianshu.com/math?formula=r_t" alt="r_t"> 、update gate <img src="https://math.jianshu.com/math?formula=z_t" alt="z_t"> 、候选隐藏层<img src="https://math.jianshu.com/math?formula=%5Ctilde%7Bh%7D_%7Bt%7D" alt="\tilde{h}_{t}"> （与 LSTM 的<img src="https://math.jianshu.com/math?formula=%5Ctilde%7Bc%7D_%7Bt%7D" alt="\tilde{c}_{t}">)类似，可以看成是当前时刻的新信息，其中<img src="https://math.jianshu.com/math?formula=r_t" alt="r_t">用来控制需要保留多少之前的记忆）</p>
<p>为了克服RNN 无法很好处理远距离依赖而提出了 LSTM，而 GRU 是LSTM 的一个变体，GRU 保持了 LSTM 的效果同时又使结构更加简单。<br> GRU 只剩下两个门，即<strong>更新门</strong>和<strong>重置门</strong>。更新门用于控制前一时刻的状态信息被代入到当前状态的程，更新门的值越大说明前一时刻的状态信息带入越多。重置门用于控制忽略前一时刻的状态信息的程度，重置门的值越小说明忽略得越多。</p>
<p><img src="https://math.jianshu.com/math?formula=%5Cbegin%7Barray%7D%7Bc%7D%7Br_%7Bt%7D%3D%5Csigma%5Cleft(W_%7Br%7D%20%5Ccdot%5Cleft%5Bh_%7Bt-1%7D%2C%20x_%7Bt%7D%5Cright%5D%5Cright)%7D%20%5C%5C%20%7Bz_%7Bt%7D%3D%5Csigma%5Cleft(W_%7Bz%7D%20%5Ccdot%5Cleft%5Bh_%7Bt-1%7D%2C%20x_%7Bt%7D%5Cright%5D%5Cright)%7D%20%5C%5C%20%7B%5Ctilde%7Bh%7D_%7Bt%7D%3D%5Ctanh%20%5Cleft(W_%7B%5Coverline%7Bh%7D%7D%20%5Ccdot%5Cleft%5Br_%7Bt%7D%20*%20h_%7Bt-1%7D%2C%20x_%7Bt%7D%5Cright%5D%5Cright)%7D%20%5C%5C%20%7Bh_%7Bt%7D%3D%5Cleft(1-z_%7Bt%7D%5Cright)%20*%20h_%7Bt-1%7D%2Bz_%7Bt%7D%20*%20%5Ctilde%7Bh%7D_%7Bt%7D%7D%20%5C%5C%20%7By_%7Bt%7D%3D%5Csigma%5Cleft(W_%7Bo%7D%20%5Ccdot%20h_%7Bt%7D%5Cright)%7D%5Cend%7Barray%7D" alt="\begin{array}{c}{r_{t}=\sigma\left(W_{r} \cdot\left[h_{t-1}, x_{t}\right]\right)} \\ {z_{t}=\sigma\left(W_{z} \cdot\left[h_{t-1}, x_{t}\right]\right)} \\ {\tilde{h}_{t}=\tanh \left(W_{\overline{h}} \cdot\left[r_{t} * h_{t-1}, x_{t}\right]\right)} \\ {h_{t}=\left(1-z_{t}\right) * h_{t-1}+z_{t} * \tilde{h}_{t}} \\ {y_{t}=\sigma\left(W_{o} \cdot h_{t}\right)}\end{array}"></p>
<p>其中，<img src="https://math.jianshu.com/math?formula=W_r%2CW_z%2CW_h" alt="W_r,W_z,W_h">都是拼接的，比如<img src="https://math.jianshu.com/math?formula=W_r%20%3D%20W_%7Brx%7D%2BW_%7Brh%7D" alt="W_r = W_{rx}+W_{rh}">，所以在学习时要分开来</p>
<p>第三式通过重置门重置后的<img src="https://math.jianshu.com/math?formula=h_%7Bt-1%7D" alt="h_{t-1}">与输入拼接，在通过 tanh激活函数得到 h’</p>
<p>最后一步记忆更新阶段，利用更新门来控制，更新门越接近1，代表记忆下来的数据越多。</p>
<p>GRU 相比LSTM，能够达到相当的效果，同时更加容易训练。GRU 使用了一个门控z 就可以进行遗忘和选择记忆，而 LSTM 要使用多个门控。</p>
<p>原文链接： <a href="https://zhuanlan.zhihu.com/p/32481747" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32481747</a> </p>
<h2 id="1-什么是GRU"><a href="#1-什么是GRU" class="headerlink" title="1. 什么是GRU"></a>1. 什么是GRU</h2><p>GRU（Gate Recurrent Unit）是循环神经网络（Recurrent Neural Network, RNN）的一种。和LSTM（Long-Short Term Memory）一样，也是为了解决长期记忆和反向传播中的梯度等问题而提出来的。</p>
<p>GRU和LSTM在很多情况下实际表现上相差无几，那么为什么我们要使用新人GRU（2014年提出）而不是相对经受了更多考验的LSTM（1997提出）呢。</p>
<p>下图1-1引用论文中的一段话来说明GRU的优势所在。</p>
<p><img src="https://pic4.zhimg.com/80/v2-a8424cd80eae1b7d312991692decbe8b_hd.jpg" alt="img">图1-1 R-NET: MACHINE READING COMPREHENSION WITH SELF-MATCHING NETWORKS（2017）</p>
<blockquote>
<p>简单译文：我们在我们的实验中选择GRU是因为它的实验效果与LSTM相似，但是更易于计算。</p>
</blockquote>
<p><strong>简单来说就是贫穷限制了我们的计算能力…</strong></p>
<p>相比LSTM，使用GRU能够达到相当的效果，并且相比之下更容易进行训练，能够很大程度上提高训练效率，因此很多时候会更倾向于使用GRU。</p>
<p>OK，那么为什么说GRU更容易进行训练呢，下面开始介绍一下GRU的内部结构。</p>
<hr>
<h2 id="2-GRU浅析"><a href="#2-GRU浅析" class="headerlink" title="2. GRU浅析"></a>2. GRU浅析</h2><h2 id="2-1-GRU的输入输出结构"><a href="#2-1-GRU的输入输出结构" class="headerlink" title="2.1 GRU的输入输出结构"></a>2.1 GRU的输入输出结构</h2><p>GRU的输入输出结构与普通的RNN是一样的。</p>
<p>有一个当前的输入 <img src="https://www.zhihu.com/equation?tex=x%5Et" alt="[公式]"> ，和上一个节点传递下来的隐状态（hidden state） <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> ，这个隐状态包含了之前节点的相关信息。</p>
<p>结合 <img src="https://www.zhihu.com/equation?tex=x%5Et+" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]">，GRU会得到当前隐藏节点的输出 <img src="https://www.zhihu.com/equation?tex=y%5Et+" alt="[公式]"> 和传递给下一个节点的隐状态 <img src="https://www.zhihu.com/equation?tex=h%5Et" alt="[公式]"> 。</p>
<p><img src="https://pic2.zhimg.com/80/v2-49244046a83e30ef2383b94644bf0f31_hd.jpg" alt="img">图2-1 GRU的输入输出结构</p>
<p>那么，GRU到底有什么特别之处呢？下面来对它的内部结构进行分析！</p>
<hr>
<h2 id="2-2-GRU的内部结构"><a href="#2-2-GRU的内部结构" class="headerlink" title="2.2 GRU的内部结构"></a>2.2 GRU的内部结构</h2><p>首先，我们先通过上一个传输下来的状态 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> 和当前节点的输入 <img src="https://www.zhihu.com/equation?tex=x%5Et" alt="[公式]"> 来获取两个门控状态。如下图2-2所示，其中 <img src="https://www.zhihu.com/equation?tex=r+" alt="[公式]"> 控制重置的门控（reset gate）， <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 为控制更新的门控（update gate）。</p>
<blockquote>
<p>Tips： <img src="https://www.zhihu.com/equation?tex=%5Csigma" alt="[公式]"> 为*<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Sigmoid_function">sigmoid</a>*函数，通过这个函数可以将数据变换为0-1范围内的数值，从而来充当门控信号。</p>
</blockquote>
<p><img src="https://pic3.zhimg.com/80/v2-7fff5d817530dada1b279c7279d73b8a_hd.jpg" alt="img">图2-2 r，z门控</p>
<p><strong>与LSTM分明的层次结构不同，下面将对GRU进行一气呵成的介绍<del>~</del> 请大家屏住呼吸，不要眨眼。</strong></p>
<p>得到门控信号之后，首先使用重置门控来得到<strong>“重置”</strong>之后的数据 <img src="https://www.zhihu.com/equation?tex=%7Bh%5E%7Bt-1%7D%7D%27+%3D+h%5E%7Bt-1%7D+%5Codot+r+" alt="[公式]"> ，再将 <img src="https://www.zhihu.com/equation?tex=%7Bh%5E%7Bt-1%7D%7D%27" alt="[公式]"> 与输入 <img src="https://www.zhihu.com/equation?tex=x%5Et+" alt="[公式]"> 进行拼接，再通过一个<a href="https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/tanh">tanh</a>激活函数来将数据放缩到<strong>-1~1</strong>的范围内。即得到如下图2-3所示的 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 。</p>
<p><img src="https://pic4.zhimg.com/80/v2-390781506bbebbef799f1a12acd7865b_hd.jpg" alt="img">图2-3 包含当前输入数据的h&amp;amp;#39;</p>
<p>这里的 <img src="https://www.zhihu.com/equation?tex=h%27+" alt="[公式]"> 主要是包含了当前输入的 <img src="https://www.zhihu.com/equation?tex=x%5Et" alt="[公式]"> 数据。有针对性地对 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 添加到当前的隐藏状态，相当于”记忆了当前时刻的状态“。类似于LSTM的选择记忆阶段（参照我的上一篇文章）。</p>
<p><img src="https://pic1.zhimg.com/80/v2-8134a00c243153bfd9fd2bcbe0844e9c_hd.jpg" alt="img">图2-3 GRU的内部结构</p>
<blockquote>
<p>图2-3中的 <img src="https://www.zhihu.com/equation?tex=%5Codot" alt="[公式]"> 是Hadamard Product，也就是操作矩阵中对应的元素相乘，因此要求两个相乘矩阵是同型的。 <img src="https://www.zhihu.com/equation?tex=%5Coplus" alt="[公式]"> 则代表进行矩阵加法操作。</p>
</blockquote>
<hr>
<p>最后介绍GRU最关键的一个步骤，我们可以称之为<strong>”更新记忆“</strong>阶段。</p>
<p>在这个阶段，我们同时进行了遗忘了记忆两个步骤。我们使用了先前得到的更新门控 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> （update gate）。</p>
<p><strong>更新表达式</strong>： <img src="https://www.zhihu.com/equation?tex=h%5Et+%3D+z+%5Codot+h%5E%7Bt-1%7D+%2B+%281+-+z%29%5Codot+h%27" alt="[公式]"></p>
<p>首先再次强调一下，门控信号（这里的 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> ）的范围为0~1。门控信号越接近1，代表”记忆“下来的数据越多；而越接近0则代表”遗忘“的越多。</p>
<p>GRU很聪明的一点就在于，<strong>我们使用了同一个门控 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 就同时可以进行遗忘和选择记忆（LSTM则要使用多个门控）</strong>。</p>
<ul>
<li><img src="https://www.zhihu.com/equation?tex=z+%5Codot+h%5E%7Bt-1%7D" alt="[公式]"> ：表示对原本隐藏状态的选择性“遗忘”。这里的 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 可以想象成遗忘门（forget gate），忘记 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> 维度中一些不重要的信息。</li>
<li><img src="https://www.zhihu.com/equation?tex=%281-z%29+%5Codot+h%27" alt="[公式]"> ： 表示对包含当前节点信息的 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 进行选择性”记忆“。与上面类似，这里的 <img src="https://www.zhihu.com/equation?tex=%281-z%29" alt="[公式]"> 同理会忘记 <img src="https://www.zhihu.com/equation?tex=h+%27" alt="[公式]"> 维度中的一些不重要的信息。或者，这里我们更应当看做是对 <img src="https://www.zhihu.com/equation?tex=h%27+" alt="[公式]"> 维度中的某些信息进行选择。</li>
<li><img src="https://www.zhihu.com/equation?tex=h%5Et+%3D+z+%5Codot+h%5E%7Bt-1%7D+%2B+%281+-+z%29%5Codot+h%27" alt="[公式]"> ：结合上述，这一步的操作就是忘记传递下来的 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D+" alt="[公式]"> 中的某些维度信息，并加入当前节点输入的某些维度信息。</li>
</ul>
<blockquote>
<p>可以看到，这里的遗忘 <img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> 和选择 <img src="https://www.zhihu.com/equation?tex=%281-z%29" alt="[公式]"> 是联动的。也就是说，对于传递进来的维度信息，我们会进行选择性遗忘，则遗忘了多少权重 （<img src="https://www.zhihu.com/equation?tex=z" alt="[公式]"> ），我们就会使用包含当前输入的 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 中所对应的权重进行弥补 <img src="https://www.zhihu.com/equation?tex=%281-z%29" alt="[公式]"> 。以保持一种”恒定“状态。</p>
</blockquote>
<hr>
<h2 id="3-LSTM与GRU的关系"><a href="#3-LSTM与GRU的关系" class="headerlink" title="3. LSTM与GRU的关系"></a>3. LSTM与GRU的关系</h2><p>GRU是在2014年提出来的，而LSTM是1997年。他们的提出都是为了解决相似的问题，那么GRU难免会参考LSTM的内部结构。那么他们之间的关系大概是怎么样的呢？这里简单介绍一下。</p>
<p>大家看到 <img src="https://www.zhihu.com/equation?tex=r" alt="[公式]"> (reset gate)实际上与他的名字有点不符。我们仅仅使用它来获得了 <img src="https://www.zhihu.com/equation?tex=h%E2%80%99" alt="[公式]"> 。</p>
<p>那么这里的 <img src="https://www.zhihu.com/equation?tex=h%27" alt="[公式]"> 实际上可以看成对应于LSTM中的hidden state；上一个节点传下来的 <img src="https://www.zhihu.com/equation?tex=h%5E%7Bt-1%7D" alt="[公式]"> 则对应于LSTM中的cell state。z对应的则是LSTM中的 <img src="https://www.zhihu.com/equation?tex=z%5Ef" alt="[公式]"> forget gate，那么 <img src="https://www.zhihu.com/equation?tex=%281-z%29" alt="[公式]"> 我们似乎就可以看成是选择门 <img src="https://www.zhihu.com/equation?tex=z%5Ei" alt="[公式]"> 了。大家可以结合我的两篇文章来进行观察，这是非常有趣的。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>GRU输入输出的结构与普通的RNN相似，其中的内部思想与LSTM相似。</p>
<p>与LSTM相比，GRU内部少了一个”门控“，参数比LSTM少，但是却也能够达到与LSTM相当的功能。考虑到硬件的<strong>计算能力</strong>和<strong>时间成本</strong>，因而很多时候我们也就会选择更加”实用“的GRU啦。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML框架 背景 实体</title>
    <url>/2020/01/29/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%A1%86%E6%9E%B6%20%E8%83%8C%E6%99%AF%20%E5%AE%9E%E4%BD%93/</url>
    <content><![CDATA[<h1 id="HTML框架"><a href="#HTML框架" class="headerlink" title="HTML框架"></a>HTML框架</h1><p>1、框架标签（frame）</p>
<p>框架对于页面的设计有着很大的作用</p>
<p>2、框架集标签（&lt;frameset&gt;）</p>
<p>框架集标签定义如何将窗口分割为框架</p>
<p>每一个frameset定义一系列行或列</p>
<p>rows/cols的值规定了每行或每列占据屏幕的面积</p>
<p>3、常用标签：</p>
<p>noresize:固定框架大小</p>
<p>cols:列</p>
<p>rows:行</p>
<p>4、内联框架</p>
<p>iframe</p>
<h1 id="HTML背景"><a href="#HTML背景" class="headerlink" title="HTML背景"></a>HTML背景</h1><h3 id="1、背景标签"><a href="#1、背景标签" class="headerlink" title="1、背景标签"></a>1、背景标签</h3><p>​    background</p>
<h3 id="2、背景颜色"><a href="#2、背景颜色" class="headerlink" title="2、背景颜色"></a>2、背景颜色</h3><p>   bgcolor</p>
<h3 id="3、背景颜色"><a href="#3、背景颜色" class="headerlink" title="3、背景颜色"></a>3、背景颜色</h3><p>颜色是由一个十六进制符号来定义、这个符号由红色绿色蓝色的值组成（RGB）</p>
<p>颜色值最小值：0(#00)</p>
<p>颜色值最大值：255(#FF)</p>
<p>红色：#FF0000 绿色：#00FF00 蓝色：#0000FF</p>
<h1 id="HTML实体"><a href="#HTML实体" class="headerlink" title="HTML实体"></a>HTML实体</h1><h3 id="1、实体"><a href="#1、实体" class="headerlink" title="1、实体"></a>1、实体</h3><p>HTML中预留字符串必须被替换成字符实体</p>
<p>如：&lt;、&gt;、&amp;</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML表单</title>
    <url>/2020/01/28/HTML%E5%AD%A6%E4%B9%A0/HTML%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h1 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h1><p>表单用于获取不同类型的用户输入</p>
<p>常用表单标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;			表单</span><br><span class="line">&lt;input&gt;			输入域</span><br><span class="line">&lt;textarea&gt;		文本域</span><br><span class="line">&lt;label&gt;			控制标签</span><br><span class="line">&lt;fieldset&gt;		定义域</span><br><span class="line">&lt;legend&gt;		域的标题</span><br><span class="line">&lt;select&gt;		选择列表</span><br><span class="line">&lt;optgroup&gt;		选项组</span><br><span class="line">&lt;option&gt;		下拉列表中的表项</span><br><span class="line">&lt;button&gt;		按钮</span><br></pre></td></tr></table></figure>

<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><h4 id="1、复选框"><a href="#1、复选框" class="headerlink" title="1、复选框"></a>1、复选框</h4><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code></p>
<h4 id="2、单选按钮"><a href="#2、单选按钮" class="headerlink" title="2、单选按钮"></a>2、单选按钮</h4><p><code>&lt;input type=&quot;radio&quot; name=&quot;...&quot;&gt;    //name属性需要相同</code></p>
<h4 id="3、下拉列表"><a href="#3、下拉列表" class="headerlink" title="3、下拉列表"></a>3、下拉列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>www.baidu.com<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>https://yuanzhiqj.github.io<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、文本域"><a href="#4、文本域" class="headerlink" title="4、文本域"></a>4、文本域</h4><p><code>&lt;textarea cols=&quot;30&quot; rows=&quot;30&quot;&gt;请在此填写&lt;/textarea&gt;</code></p>
<h4 id="5、创建按钮"><a href="#5、创建按钮" class="headerlink" title="5、创建按钮"></a>5、创建按钮</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="表单与php交互"><a href="#表单与php交互" class="headerlink" title="表单与php交互"></a>表单与php交互</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">form action="" method="get"&gt;</span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML列表 块 布局</title>
    <url>/2020/01/27/HTML%E5%AD%A6%E4%B9%A0/HTML%E5%88%97%E8%A1%A8%20%E5%9D%97%20%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>				有序列表	//单元前面有顺序标识</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>				无序列表	//单元前面只有·</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>				列表项</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>				列表</span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>				列表项</span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>				描述</span><br></pre></td></tr></table></figure>

<h3 id="1、无序列表"><a href="#1、无序列表" class="headerlink" title="1、无序列表"></a>1、无序列表</h3><p>使用标签:&lt;ul&gt;&lt;li&gt;</p>
<p>属性：disc（实心圆）、circle（空心圆）、square（方块）</p>
<h3 id="2、有序列表"><a href="#2、有序列表" class="headerlink" title="2、有序列表"></a>2、有序列表</h3><p>使用标签:&lt;ol&gt;&lt;li&gt;</p>
<p>属性：A（大写）、a（小写）、l（大写罗马）、i（小写罗马）、start（数字，可指定开始数）</p>
<h3 id="3、嵌套列表"><a href="#3、嵌套列表" class="headerlink" title="3、嵌套列表"></a>3、嵌套列表</h3><p>使用标签:&lt;ul&gt;&lt;ol&gt;&lt;li&gt;</p>
<h3 id="4、自定义列表"><a href="#4、自定义列表" class="headerlink" title="4、自定义列表"></a>4、自定义列表</h3><p>使用标签:&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</p>
<h1 id="HTML块"><a href="#HTML块" class="headerlink" title="HTML块"></a>HTML块</h1><h3 id="1、HTML块元素"><a href="#1、HTML块元素" class="headerlink" title="1、HTML块元素"></a>1、HTML块元素</h3><p>块元素在显示时，通常会以新行开始</p>
<p>如：&lt;h1&gt;&lt;p&gt;&lt;ul&gt;</p>
<h3 id="2、HTML内联元素"><a href="#2、HTML内联元素" class="headerlink" title="2、HTML内联元素"></a>2、HTML内联元素</h3><p>内联元素通常不会以新行开始</p>
<p>如：&lt;b&gt;&lt;a&gt;&lt;img&gt;</p>
<h3 id="3、HTML-lt-div-gt-元素"><a href="#3、HTML-lt-div-gt-元素" class="headerlink" title="3、HTML&lt;div&gt;元素"></a>3、HTML&lt;div&gt;元素</h3><p>&lt;div&gt;元素也被称为块元素、其主要是组合HTML元素的容器</p>
<h3 id="4、HTML-lt-span-gt-元素"><a href="#4、HTML-lt-span-gt-元素" class="headerlink" title="4、HTML&lt;span&gt;元素"></a>4、HTML&lt;span&gt;元素</h3><p>&lt;span&gt;元素是内联元素、可作为文本的容器</p>
<h1 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>table布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">marginheight</span>=<span class="string">"0px"</span> <span class="attr">marginwidth</span>=<span class="string">"0px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"950px"</span> <span class="attr">style</span>=<span class="string">"background-color: darkgray"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"10%"</span> <span class="attr">style</span>=<span class="string">"background-color: aqua"</span>&gt;</span>head<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>  <span class="attr">width</span>=<span class="string">"30%"</span> <span class="attr">height</span>=<span class="string">"80%"</span> <span class="attr">style</span>=<span class="string">"background-color: blue"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>  <span class="attr">width</span>=<span class="string">"70%"</span> <span class="attr">height</span>=<span class="string">"80%"</span> <span class="attr">style</span>=<span class="string">"background-color: brown"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>  <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"10%"</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">style</span>=<span class="string">"background-color: black"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>机器学习/卷积神经网络</title>
    <url>/2020/01/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h1><p>valid卷积(不进行填充)：</p>
<p><code>nxn * fxf → n-f+1 x n-f+1</code></p>
<p>same卷积(卷积后与输出与输入尺寸一样)</p>
<p><code>n+2p-f+1 x n+2p-f+1</code></p>
<h1 id="卷积步长（stride）"><a href="#卷积步长（stride）" class="headerlink" title="卷积步长（stride）"></a>卷积步长（stride）</h1><p><code>(n+2p-f)/s+1 x (n+2p-f)/s+1               //向下取整</code></p>
<h1 id="三维卷积"><a href="#三维卷积" class="headerlink" title="三维卷积"></a>三维卷积</h1><p><code>nxnxnc * fxfxnc → n-f+1 x n-f+1 x nc&#39;</code></p>
<p>nc = nc </p>
<p>nc’为使用过滤器的数目</p>
<h1 id="单层卷积网络"><a href="#单层卷积网络" class="headerlink" title="单层卷积网络"></a>单层卷积网络</h1><p>f<sup>[l]</sup> = fliter size</p>
<p>p<sup>[l]</sup> = padding</p>
<p>s<sup>[l]</sup> = stride</p>
<p>nc<sup>[l]</sup> = number of fliters</p>
<p>Input: n<sub>H</sub><sup>[l-1]</sup> x n<sub>W</sub><sup>[l-1]</sup> x n<sub>C</sub><sup>[l-1]</sup></p>
<p>Output: n<sub>H</sub><sup>[l]</sup> x n<sub>W</sub><sup>[l]</sup> x n<sub>C</sub><sup>[l]</sup></p>
<h1 id="池化层（Pooling-layer）"><a href="#池化层（Pooling-layer）" class="headerlink" title="池化层（Pooling layer）"></a>池化层（Pooling layer）</h1><h3 id="最大池化-max-pooling"><a href="#最大池化-max-pooling" class="headerlink" title="最大池化(max pooling)"></a>最大池化(max pooling)</h3><p>取范围内的最大值，梯度下降无需改变任何值（即确定了超参）</p>
<p>常用：f=2,s=2。相当于高度宽度减半。</p>
<h3 id="平均池化-Average-pooling"><a href="#平均池化-Average-pooling" class="headerlink" title="平均池化(Average pooling)"></a>平均池化(Average pooling)</h3><p>范围内求平均值</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML样式</title>
    <url>/2020/01/17/HTML%E5%AD%A6%E4%B9%A0/HTML%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="HTML样式"><a href="#HTML样式" class="headerlink" title="HTML样式"></a>HTML样式</h1><h3 id="1、标签"><a href="#1、标签" class="headerlink" title="1、标签"></a>1、标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;:样式定义</span><br><span class="line">&lt;link&gt;:资源引用</span><br></pre></td></tr></table></figure>

<h3 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rel = &quot;stylesheet&quot;:外部样式表</span><br><span class="line">type = &quot;text/css&quot;:引入文档的类型</span><br><span class="line">margin-left:边距</span><br></pre></td></tr></table></figure>

<h3 id="3、三种样式表插入方法"><a href="#3、三种样式表插入方法" class="headerlink" title="3、三种样式表插入方法"></a>3、三种样式表插入方法</h3><p>外部样式表</p>
<p><code>&lt;link rel = &quot;stylesheet&quot;type=&quot;text/css&quot; href = &quot;mystyle.css&quot;&gt;</code></p>
<p>内部样式表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style type = &quot;text/css&quot;&gt;</span><br><span class="line">body&#123;background-color:red&#125;</span><br><span class="line">p&#123;margin-left:20px&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>内联样式表</p>
<p><code>&lt;p style = &quot;color:red&quot;&gt;</code></p>
<h1 id="HTML链接"><a href="#HTML链接" class="headerlink" title="HTML链接"></a>HTML链接</h1><h3 id="1、链接数据"><a href="#1、链接数据" class="headerlink" title="1、链接数据"></a>1、链接数据</h3><p>​    文本链接</p>
<p>​    图片链接</p>
<h3 id="2、属性-1"><a href="#2、属性-1" class="headerlink" title="2、属性"></a>2、属性</h3><p>​    href属性：指向另一个文档的链接</p>
<p>​    name属性：创建文档内的链接</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a name=&quot;tips&quot;&gt;hello&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;#tips&quot;&gt;跳转到hello&lt;/a&gt;	//跳转到tips所在的地方</span><br></pre></td></tr></table></figure></code></pre><h3 id="3、img标签属性"><a href="#3、img标签属性" class="headerlink" title="3、img标签属性"></a>3、img标签属性</h3><p>​    alt:替换文本属性</p>
<p>​    width:宽</p>
<p>​    height:高</p>
<h1 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;							定义表格</span><br><span class="line">&lt;caption&gt;						定义表格标题</span><br><span class="line">&lt;th&gt;							定义表格的表头</span><br><span class="line">&lt;tr&gt;							定义表格的行</span><br><span class="line">&lt;td&gt;							定义表格的单元</span><br><span class="line">&lt;thead&gt;							定义表格的页眉</span><br><span class="line">&lt;tbody&gt;							定义表格的主体</span><br><span class="line">&lt;tfoot&gt;							定义表格的页脚</span><br><span class="line">&lt;col&gt;							定义表格的列属性</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML元素</title>
    <url>/2020/01/17/HTML%E5%AD%A6%E4%B9%A0/HTML%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="1、HTML元素"><a href="#1、HTML元素" class="headerlink" title="1、HTML元素"></a>1、HTML元素</h2><h3 id="1、元素指的是开始标签到结束标签的所有代码"><a href="#1、元素指的是开始标签到结束标签的所有代码" class="headerlink" title="1、元素指的是开始标签到结束标签的所有代码"></a>1、元素指的是开始标签到结束标签的所有代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">开始标签				元素内容					结束标签</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>					   this is my web page 		  <span class="tag">&lt;/<span class="name">p</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span>	//空元素</span><br></pre></td></tr></table></figure>

<h3 id="2、元素语法"><a href="#2、元素语法" class="headerlink" title="2、元素语法"></a>2、元素语法</h3><p>元素的内容是开始标签与结束标签之间的内容</p>
<p>空元素在开始标签中进行关闭</p>
<p>大多数HTML元素可拥有属性</p>
<h3 id="3、嵌套的HTML元素"><a href="#3、嵌套的HTML元素" class="headerlink" title="3、嵌套的HTML元素"></a>3、嵌套的HTML元素</h3><h2 id="2、HTML元素属性和格式化"><a href="#2、HTML元素属性和格式化" class="headerlink" title="2、HTML元素属性和格式化"></a>2、HTML元素属性和格式化</h2><h3 id="1、属性"><a href="#1、属性" class="headerlink" title="1、属性"></a>1、属性</h3><p>1、标签可以拥有属性为元素提供更多的信息</p>
<p>2、属性以键/值对的形式出现</p>
<p><code>href = &quot;https://yuanzhiqj.github.com&quot;</code></p>
<p>3、常用标签属性</p>
<p><code>&lt;h1&gt;:align对其方式</code></p>
<p><code>&lt;body&gt;:bgcolor背景颜色</code></p>
<p><code>&lt;a&gt;:target规定在何处打开链接 _self在当前目录页覆盖 _blank新建标签页打开</code></p>
<p>4、通用元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class:规定元素的类名</span><br><span class="line">id:规定元素唯一ID</span><br><span class="line">style:规定元素的样式</span><br><span class="line">title:规定元素的额外信息</span><br></pre></td></tr></table></figure>

<h3 id="2、-格式化"><a href="#2、-格式化" class="headerlink" title="2、 格式化"></a>2、 格式化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;					定义粗体文本</span><br><span class="line">&lt;big&gt;				定义大号字</span><br><span class="line">&lt;em&gt;				定义着重文字</span><br><span class="line">&lt;i&gt;					定义斜体字</span><br><span class="line">&lt;small&gt;				定义小体字</span><br><span class="line">&lt;sub&gt;				定义下标字</span><br><span class="line">&lt;sup&gt;				定义上标字</span><br><span class="line">&lt;ins&gt;				定义插入字</span><br><span class="line">&lt;del&gt;				定义删除字</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode/113.杨辉三角</title>
    <url>/2020/01/17/leetcode/113.%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><code>给定一个非负数numRows,生成杨辉三角前numRows行</code></p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 5</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>利用动态规划找规律，每一行的首尾均为1。而a[i] [j]  =a[i-1] [j-1] + a[i-1] [j];</p>
<p>利用两次for循环即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i+<span class="number">1</span>; j++)	<span class="comment">//每一行的数字</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>)					<span class="comment">//行首</span></span><br><span class="line">                    temp.push_back(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == i)				<span class="comment">//行尾</span></span><br><span class="line">                    temp.push_back(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp.push_back(res[i<span class="number">-1</span>][j<span class="number">-1</span>]+res[i<span class="number">-1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习/HTML基础讲解</title>
    <url>/2020/01/16/HTML%E5%AD%A6%E4%B9%A0/HTML%E5%9F%BA%E7%A1%80%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="1、HTML基础标签"><a href="#1、HTML基础标签" class="headerlink" title="1、HTML基础标签"></a>1、HTML基础标签</h2><p><code>&lt;!DOCTYPE html&gt;</code></p>
<p>是HTML5的标识头，html的不同版本具有不同的标识头</p>
<p><code>&lt;html lang=&quot;en&quot;&gt;</code></p>
<p>语言默认为英文</p>
<p><code>&lt;head&gt;</code> <code>&lt;body&gt;</code></p>
<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>   指定编码格式</p>
<p><code>&lt;title&gt;</code>  指定标题</p>
<h2 id="2、HTML标题"><a href="#2、HTML标题" class="headerlink" title="2、HTML标题"></a>2、HTML标题</h2><p><code>&lt;h1&gt; ...&lt;h6&gt;</code> </p>
<p>标题由大到小</p>
<h2 id="3、HTML段落"><a href="#3、HTML段落" class="headerlink" title="3、HTML段落"></a>3、HTML段落</h2><p><code>&lt;p&gt;...&lt;/p&gt;</code></p>
<p>在这之后的语句会另起一行</p>
<h2 id="4、HTML超链接"><a href="#4、HTML超链接" class="headerlink" title="4、HTML超链接"></a>4、HTML超链接</h2><p><code>&lt;a href=&quot;链接地址&quot;&gt;链接名字&lt;/a&gt;</code></p>
<h2 id="5、HTML图片链接"><a href="#5、HTML图片链接" class="headerlink" title="5、HTML图片链接"></a>5、HTML图片链接</h2><p><code>&lt;img src=&quot;图片地址&quot;&gt;</code></p>
]]></content>
  </entry>
  <entry>
    <title>最大子序和</title>
    <url>/2020/01/10/leetcode/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    <content><![CDATA[<p>##最大子序和##</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode/17.电话号码的字母组合</title>
    <url>/2019/11/21/leetcode/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h1 id="17-电话号码的字母组合（广度优先法）"><a href="#17-电话号码的字母组合（广度优先法）" class="headerlink" title="17.电话号码的字母组合（广度优先法）"></a>17.电话号码的字母组合（广度优先法）</h1><h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p>淦……最近英文版leetcode不知道为啥好像崩了。（顺便给自己偷几天懒有了正当理由，不过感觉中文版的好多了</p>
<p><strong>题目描述</strong></p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/17_telephone_keypad.png" alt="jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</span><br><span class="line"></span><br><span class="line">给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入：&quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>



<p><strong>准备工作</strong></p>
<p>为了简单的找到数字对应的字母，采用哈希表储存：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; m&#123;&#123;<span class="string">'2'</span>, <span class="string">"abc"</span>&#125;,&#123;<span class="string">'3'</span>,<span class="string">"def"</span>&#125;,&#123;<span class="string">'4'</span>,<span class="string">"ghi"</span>&#125;,&#123;<span class="string">'5'</span>,<span class="string">"jkl"</span>&#125;,&#123;<span class="string">'6'</span>,<span class="string">"mno"</span>&#125;,&#123;<span class="string">'7'</span>,<span class="string">"pqrs"</span>&#125;,&#123;<span class="string">'8'</span>,<span class="string">"tuv"</span>&#125;,&#123;<span class="string">'9'</span>,<span class="string">"wxyz"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>算法说明</strong></p>
<p>由于采用的是广度优先搜索的思想，所以本题我们借助队列来实现算法。</p>
<p>由于队列为“先进先出”的容器，将首个数字对应的全部字符放进队列后进行循环遍历。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//先存储第一个对应的字符</span><br><span class="line">        for(int i = 0; i &lt; m[digits[0]].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string str;</span><br><span class="line">			str.push_back(m[digits[0]][i]);</span><br><span class="line">            q.push(str);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>在循环中，每次将队列头与下个数字对应的全部字符依次连接后，进入队列。队列头与每个字符依次连接和出队列。注意由于将新的字符串压入队列，所以在循环之前需要获得队列的长度，在队列长度减少的情况下进行循环。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int length = q.size();</span><br><span class="line">     while(length--)</span><br><span class="line">      &#123;</span><br><span class="line">          for(int j = 0; j &lt; m[digits[i]].size(); j++)</span><br><span class="line">          &#123;</span><br><span class="line">              s = q.front();</span><br><span class="line">              s = s + m[digits[i]][j];</span><br><span class="line">              q.push(s);</span><br><span class="line">          &#125;</span><br><span class="line">          q.pop();    //弹出队头</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<p><strong>全部代码如下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;string&gt; letterCombinations(string digits) &#123;</span><br><span class="line">        vector&lt;string&gt; result;</span><br><span class="line">        map&lt;char, string&gt; m&#123;&#123;&apos;2&apos;, &quot;abc&quot;&#125;,&#123;&apos;3&apos;,&quot;def&quot;&#125;,&#123;&apos;4&apos;,&quot;ghi&quot;&#125;,&#123;&apos;5&apos;,&quot;jkl&quot;&#125;,&#123;&apos;6&apos;,&quot;mno&quot;&#125;,&#123;&apos;7&apos;,&quot;pqrs&quot;&#125;,&#123;&apos;8&apos;,&quot;tuv&quot;&#125;,&#123;&apos;9&apos;,&quot;wxyz&quot;&#125;&#125;; //建立哈希表</span><br><span class="line">        queue&lt;string&gt; q;    //建立队列</span><br><span class="line"></span><br><span class="line">        //先存储第一个对应的字符</span><br><span class="line">        for(int i = 0; i &lt; m[digits[0]].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string str;</span><br><span class="line">			str.push_back(m[digits[0]][i]);</span><br><span class="line">            q.push(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string s;   //建立临时字符串</span><br><span class="line">        //开始遍历</span><br><span class="line">        for(int i = 1; i &lt; digits.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int length = q.size();</span><br><span class="line">            while(length--)</span><br><span class="line">            &#123;</span><br><span class="line">                for(int j = 0; j &lt; m[digits[i]].size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    s = q.front();</span><br><span class="line">                    s = s + m[digits[i]][j];</span><br><span class="line">                    q.push(s);</span><br><span class="line">                &#125;</span><br><span class="line">                q.pop();    //弹出队头</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(q.front());</span><br><span class="line">            q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>后记</strong></p>
<p>其实原来想着用最暴力最简单的方法来做的，但是实在是太麻烦了。借鉴了解题区【苏格】大佬的思路。十分感谢。</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode/832. Flipping an Image</title>
    <url>/2019/11/07/leetcode/832.%20Flipping%20an%20Image/</url>
    <content><![CDATA[<h1 id="832-Flipping-an-Image"><a href="#832-Flipping-an-Image" class="headerlink" title="832.Flipping an Image"></a>832.Flipping an Image</h1><h2 id="二元数组问题"><a href="#二元数组问题" class="headerlink" title="二元数组问题"></a>二元数组问题</h2><p>问题描述：给定一个0-1矩阵，依次将矩阵的每一行进行水平翻转后，再将每个元素反转。</p>
<p>个人认为的难点是对于vector二维的遍历。在本题中我采用了用迭代器的方法，但是感觉略显笨拙，代码如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; flipAndInvertImage(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) &#123;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;::iterator it1;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it2;</span><br><span class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(it1 = A.begin(); it1 != A.end(); it1++)</span><br><span class="line">       &#123;</span><br><span class="line">           j = <span class="number">0</span>;</span><br><span class="line">           a = *it1;</span><br><span class="line">           reverse(a.begin(), a.end());</span><br><span class="line">           <span class="keyword">for</span>(it2 = a.begin(); it2 != a.end(); it2++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(*it2 == <span class="number">1</span>)</span><br><span class="line">                   A[i][j] = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   A[i][j] = <span class="number">1</span>;</span><br><span class="line">               j++;</span><br><span class="line">           &#125;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>但在讨论区中有一个非常简洁的代码，用的是C++11的标准。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; flipAndInvertImage(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// iterate over each row</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; row : A)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// first reverse the order of the row </span></span><br><span class="line">            <span class="comment">// (this can be done after the bit flip as well)</span></span><br><span class="line">            reverse(row.begin(), row.end());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// xor each element of the row to flip the bits</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>&amp; val : row)</span><br><span class="line">            &#123;</span><br><span class="line">                val ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// return original ref</span></span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><font color = red> 遍历vector容器的三种方法</font></p>
<p>1、下标法    </p>
<p><code>for(int i = 0; i &lt; A.size(); i++)</code></p>
<p>2、迭代器方法</p>
<p><code>for(vector&lt;Elemtype&gt;::iterator iter = A.begin();iter !=A.end();iter++)</code></p>
<p>3、C++11标准</p>
<p><code>for(auto i : A)</code></p>
]]></content>
  </entry>
  <entry>
    <title>leetcode/2. Add Two Numbers</title>
    <url>/2019/11/04/leetcode/2.%20Add%20Two%20Numbers/</url>
    <content><![CDATA[<h1 id="leetcode-2"><a href="#leetcode-2" class="headerlink" title="leetcode #2"></a>leetcode #2</h1><h2 id="链表问题"><a href="#链表问题" class="headerlink" title="链表问题"></a>链表问题</h2><p>遍历链表，直到两个链表均为空。</p>
<p>但是若最后是需要进位的数，则还需添加判断条件，即sum是否为0。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* result = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* prePtr;</span><br><span class="line">        ListNode* curPtr;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//add</span></span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += l1-&gt;val;</span><br><span class="line">                 l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += l2-&gt;val;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//insert</span></span><br><span class="line">            curPtr = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(result == <span class="literal">NULL</span>)</span><br><span class="line">                result = curPtr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prePtr-&gt;next = curPtr;</span><br><span class="line">            sum = sum / <span class="number">10</span>;</span><br><span class="line">            prePtr = curPtr;</span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            curPtr = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">            prePtr-&gt;next = curPtr;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>lab/gdb</title>
    <url>/2019/11/01/lab/gdb/</url>
    <content><![CDATA[<h1 id="计算机系统基础LAB1"><a href="#计算机系统基础LAB1" class="headerlink" title="计算机系统基础LAB1"></a>计算机系统基础LAB1</h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h2><p>1、 熟悉linux操作的基本操作；</p>
<p>2、 掌握gcc编译方法；</p>
<p>3、 掌握gdb的调试工具使用；</p>
<p>4、 掌握objdump反汇编工具使用；</p>
<p>5、 熟悉理解反汇编程序（对照源程序与objdump生成的汇编程序）。</p>
<h2 id="二、-实验环境"><a href="#二、-实验环境" class="headerlink" title="二、 实验环境"></a>二、 实验环境</h2><p>列举你所使用的软件工具</p>
<p>1、 使用powershell远程连接至bupt1服务端</p>
<p>三、实验内容</p>
<p>现有int型数组a[i]=i-50,b[i]=i+y，其中y取自于学生本人学号2018211x*y的个位。登录bupt1服务器，在linux环境下使用vi编辑器编写C语言源程序，完成数组a+b的功能，规定数组长度为100，函数名为madd（），数组a，b均定义在函数内，采用gcc编译该程序（不使用优化选项），</p>
<p>1、 使用objdump工具生成汇编程序，找到madd函数的汇编程序，给出截图；</p>
<p>2、 用gdb进行调试，练习如下gdb命令，给出截图；</p>
<p>gdb、file、kill、quit、break、delete、clear、info break、run、continue、nexti、stepi、disassemble、list、print、x、info reg、watch</p>
<p>3、 找到a[i]+b[i]对应的汇编指令，指出a[i]和b[i]位于哪个寄存器中，给出截图；</p>
<p>4、 使用单步指令及gdb相关命令，显示a[xy]+b[xy]对应的汇编指令执行前后操作数寄存器十进制和十六进制的值，其中x，y取自于学生本人学号2018211x*y的百位和个位。</p>
<p>学号2018211999，a[99]+b[99]单步执行前后的参考截图如下（实际命令未显示出）：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps1.jpg" alt="img"> </p>
<h2 id="三、-实验步骤及实验分析"><a href="#三、-实验步骤及实验分析" class="headerlink" title="三、 实验步骤及实验分析"></a>三、 实验步骤及实验分析</h2><p>1、使用vim lab1.c指令编写源程序。</p>
<p>​    <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps2.jpg" alt="img"></p>
<p>键入i进入编辑模式，编辑完毕后按esc进入末行模式后键入:x后保存退出。</p>
<p>   用cat lab1.c指令打开后如下所示</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps3.jpg" alt="img"> </p>
<p>2、使用gcc -g lab1.c -o lab1指令生成可执行程序并附加调试信息。</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps4.jpg" alt="img"> </p>
<p>用./lab1打开可执行程序后运行结果如下：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps5.jpg" alt="img"> </p>
<p>3、使用objdump -d lab1指令生成汇编程序。madd函数的汇编程序如下：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps6.jpg" alt="img"> </p>
<p>4、练习gdb调试指令</p>
<p>·file</p>
<pre><code>打开要调试的可执行文件</code></pre><p>​     <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps7.jpg" alt="img"></p>
<p>·kill</p>
<pre><code>终止正在运行的程序

![img](file:///C:\Users\dell\AppData\Local\Temp\ksohtml11304\wps8.jpg)    </code></pre><p>·quit</p>
<pre><code>退出调试</code></pre><p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps9.jpg" alt="img"> </p>
<p>·break</p>
<p>设置断点处的位置</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps10.jpg" alt="img"> </p>
<p>·delete</p>
<p>删除断点，选项为断点的编号</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps11.jpg" alt="img"> </p>
<p>·clear</p>
<p>删除断点，选项为设置了断点的行号</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps12.jpg" alt="img"> </p>
<p>·info break</p>
<p>查看断点处的情况</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps13.jpg" alt="img"> </p>
<p>·run</p>
<p>运行程序</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps14.jpg" alt="img"> </p>
<p>·continue</p>
<p>从断点处继续运行，直到下一断点处或程序结束</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps15.jpg" alt="img"> </p>
<p>·nexti</p>
<p>直接执行下一步语句</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps16.jpg" alt="img"> </p>
<p>·stepi</p>
<p>执行下一步语句，如果遇到函数则进入函数内</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps17.jpg" alt="img"> </p>
<p>·list</p>
<p>显示源程序，一次显示10行</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps18.jpg" alt="img"> </p>
<p>·print</p>
<p>打印出变量、寄存器储存的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps19.jpg" alt="img"> </p>
<p>·x</p>
<p>打印出内存存储的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps20.jpg" alt="img"> </p>
<p>·info reg</p>
<p>显示出所有寄存器的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps21.jpg" alt="img"> </p>
<p>·watch</p>
<p>跟踪变量，如发生变化则显示改变前及改变后的信息</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps22.jpg" alt="img"> </p>
<p>5、找到a[i]+b[i]的汇编指令：</p>
<p>  <img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps23.jpg" alt="img"></p>
<p>​    a[i]所在的位置为“-816（%rbp,%rax,4）”</p>
<p>b[i]所在的位置为“-416（%rbp,%rax,4)”</p>
<p>i所在的位置为-824（%rbp)</p>
<p>temp所在位置为-820（%rbp)</p>
<p>存放a[i]+b[i]的值的寄存器为%eax</p>
<p>该汇编指令先将a[i]的值移动到%edx中，再将b[i]的值移动到%eax中，通过addl将其相加，再存放至变量temp中。</p>
<p>单步执行指令：</p>
<p><img src="file:///C:%5CUsers%5Cdell%5CAppData%5CLocal%5CTemp%5Cksohtml11304%5Cwps24.jpg" alt="img"> </p>
<p>使用print $eax 打印寄存器寄存的信息。得到原来%eax中的值为46，只后变为b[46]的值52，将a[46]的值加入后得到48，十六进制为0x30。</p>
]]></content>
  </entry>
  <entry>
    <title>mytest</title>
    <url>/2019/10/28/mytest/</url>
    <content><![CDATA[<p><strong>在whl带佬的指导下，爷终于搞定了</strong></p>
<p><img src="http://i2.tiimg.com/703093/1e80a95fd47ce6ec.jpg" alt="jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
  </entry>
</search>
